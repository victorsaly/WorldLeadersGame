@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Web.Services
@inject IAuthenticationClientService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - World Leaders Game</PageTitle>

<div class="retro-game-container flex items-center justify-center p-4">
    <div class="pixel-art-card green-theme w-full max-w-md">
        <!-- Header -->
        <div class="text-center mb-8">
            <h1 class="retro-title text-2xl mb-4">üåç WORLD LEADERS</h1>
            <p class="retro-subtitle mb-2">EDUCATIONAL ADVENTURE</p>
            <p class="retro-body text-sm">Geography & Leadership for Young Learners</p>
        </div>

        <!-- Login Form -->
        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin" FormName="LoginForm" class="space-y-6">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 text-sm" />

            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="pixel-art-card bg-red-100 border-red-400 text-red-700 p-4 mb-4">
                    <div class="flex items-center">
                        <span class="text-2xl mr-2">‚ö†Ô∏è</span>
                        <span class="retro-body font-bold">@errorMessage</span>
                    </div>
                </div>
            }

            <!-- Success Message -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="pixel-art-card bg-green-100 border-green-400 text-green-700 p-4 mb-4">
                    <div class="flex items-center">
                        <span class="text-2xl mr-2">üéâ</span>
                        <span class="retro-body font-bold">@successMessage</span>
                    </div>
                </div>
            }

            <!-- Username/Email Field -->
            <div>
                <label for="usernameOrEmail" class="block retro-body font-bold mb-2">
                    üîë Username or Email
                </label>
                <InputText id="usernameOrEmail" 
                          @bind-Value="loginRequest.UsernameOrEmail" 
                          class="w-full px-4 py-3 border-4 border-gray-400 bg-white retro-body focus:border-green-500 focus:ring-4 focus:ring-green-200 min-h-[48px]"
                          placeholder="Enter your username or email" />
                <ValidationMessage For="@(() => loginRequest.UsernameOrEmail)" class="text-red-600 retro-body text-sm" />
            </div>

            <!-- Password Field -->
            <div>
                <label for="password" class="block retro-body font-bold mb-2">
                    üîê Password
                </label>
                <InputText id="password" 
                          type="password"
                          @bind-Value="loginRequest.Password" 
                          class="w-full px-4 py-3 border-4 border-gray-400 bg-white retro-body focus:border-green-500 focus:ring-4 focus:ring-green-200 min-h-[48px]"
                          placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginRequest.Password)" class="text-red-600 retro-body text-sm" />
            </div>

            <!-- Login Button -->
            <button type="submit" 
                    disabled="@isLoading" 
                    class="pixel-art-button w-full retro-touch-target">
                @if (isLoading)
                {
                    <span class="flex items-center justify-center">
                        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        LOGGING IN...
                    </span>
                }
                else
                {
                    <span>üéÆ START LEARNING!</span>
                }
            </button>
        </EditForm>

        <!-- Register Link -->
        <div class="mt-6 text-center">
            <p class="retro-body">
                Don't have an account? 
                <a href="/register" class="text-green-600 hover:text-green-800 font-bold retro-body">REGISTER HERE</a>
            </p>
        </div>

        <!-- Demo Credentials -->
        <div class="mt-6 pixel-art-card bg-green-50 border-green-400">
            <h3 class="retro-subtitle text-green-800 mb-2">üéØ DEMO ACCOUNT</h3>
            <p class="retro-body text-green-700 text-sm">
                <strong>Username:</strong> student123<br>
                <strong>Password:</strong> Education123!
            </p>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new() { UsernameOrEmail = "", Password = "" };
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        StateHasChanged();

        try
        {
            var response = await AuthService.LoginAsync(loginRequest);
            
            if (response != null && !string.IsNullOrEmpty(response.AccessToken))
            {
                successMessage = $"Welcome back, {response.User.DisplayName}! üéâ";
                StateHasChanged();
                
                // Wait a moment to show success message, then navigate
                await Task.Delay(1500);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials and try again.";
            }
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Invalid username/email or password. Please try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Connection error. Please check your internet connection and try again.";
            Console.WriteLine($"Login HTTP error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
