@page "/login"
@layout EmptyLayout
@rendermode InteractiveServer
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Web.Services
@inject IAuthenticationClientService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login - World Leaders Game</PageTitle>

<div class="retro-game-container p-8">
    <div class="pixel-art-card green-theme max-w-md mx-auto">
        <!-- Header -->
        <div class="text-center mobile-spacing-md">
            <h1 class="retro-title mobile-text-2xl mb-4">üåç WORLD LEADERS</h1>
            <p class="retro-subtitle mb-2">EDUCATIONAL ADVENTURE</p>
            <p class="retro-body mobile-text-sm">Geography & Leadership for Young Learners</p>
        </div>

        <!-- Login Form -->
        <EditForm Model="@loginRequest" OnValidSubmit="@HandleLogin" FormName="LoginForm" class="mobile-gap-md">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-600 mobile-text-sm" />

            <!-- Error Message -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="pixel-art-card bg-red-100 border-red-400 text-red-700 mobile-spacing-sm mobile-spacing-md">
                    <div class="flex items-center mobile-gap-sm">
                        <span class="mobile-text-xl">‚ö†Ô∏è</span>
                        <span class="retro-body font-bold mobile-text-sm">@errorMessage</span>
                    </div>
                </div>
            }

            <!-- Success Message -->
            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="pixel-art-card bg-green-100 border-green-400 text-green-700 mobile-spacing-sm mobile-spacing-md">
                    <div class="flex items-center mobile-gap-sm">
                        <span class="mobile-text-xl">üéâ</span>
                        <span class="retro-body font-bold mobile-text-sm">@successMessage</span>
                    </div>
                </div>
            }

            <!-- Username/Email Field -->
            <div class="mobile-spacing-sm">
                <label for="usernameOrEmail" class="block retro-body font-bold mobile-spacing-xs mobile-text-sm">
                    üîë Username or Email
                </label>
                <InputText id="usernameOrEmail" 
                          @bind-Value="loginRequest.UsernameOrEmail" 
                          class="retro-input w-full"
                          placeholder="Enter your username or email" />
                <ValidationMessage For="@(() => loginRequest.UsernameOrEmail)" class="text-red-600 retro-body mobile-text-xs" />
            </div>

            <!-- Password Field -->
            <div class="mobile-spacing-sm">
                <label for="password" class="block retro-body font-bold mobile-spacing-xs mobile-text-sm">
                    üîê Password
                </label>
                <InputText id="password" 
                          type="password"
                          @bind-Value="loginRequest.Password" 
                          class="retro-input w-full"
                          placeholder="Enter your password" />
                <ValidationMessage For="@(() => loginRequest.Password)" class="text-red-600 retro-body mobile-text-xs" />
            </div>

            <!-- Login Button -->
            <div class="mobile-spacing-md">
                <button type="submit" 
                        disabled="@isLoading" 
                        class="retro-touch-button-large w-full"
                        aria-label="Login to start your educational adventure">
                    @if (isLoading)
                    {
                        <span class="flex items-center justify-center mobile-gap-sm">
                            <span class="retro-loading-spinner"></span>
                            LOGGING IN...
                        </span>
                    }
                    else
                    {
                        <span>üéÆ START LEARNING!</span>
                    }
                </button>
            </div>
        </EditForm>

        <!-- Register Link -->
        <div class="mobile-spacing-md text-center">
            <p class="retro-body mobile-text-sm">
                Don't have an account? 
            </p>
            <a href="/register" class="retro-touch-button mobile-spacing-sm" aria-label="Register for a new account">
                üìù REGISTER HERE
            </a>
        </div>

        <!-- Demo Credentials -->
        <div class="mobile-spacing-md pixel-art-card bg-green-50 border-green-400">
            <h3 class="retro-subtitle text-green-800 mobile-spacing-xs mobile-text-sm">üéØ DEMO ACCOUNT</h3>
            <p class="retro-body text-green-700 mobile-text-xs">
                <strong>Username:</strong> student123<br>
                <strong>Password:</strong> Education123!
            </p>
        </div>
    </div>
</div>

@code {
    private LoginRequest loginRequest = new() { UsernameOrEmail = "", Password = "" };
    private bool isLoading = false;
    private string errorMessage = "";
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if already authenticated
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/");
            return;
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = "";
        successMessage = "";
        StateHasChanged();

        try
        {
            var response = await AuthService.LoginAsync(loginRequest);
            
            if (response != null && !string.IsNullOrEmpty(response.AccessToken))
            {
                successMessage = $"Welcome back, {response.User.DisplayName}! üéâ";
                StateHasChanged();
                
                // Wait a moment to show success message, then navigate
                await Task.Delay(1500);
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials and try again.";
            }
        }
        catch (UnauthorizedAccessException)
        {
            errorMessage = "Invalid username/email or password. Please try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Connection error. Please check your internet connection and try again.";
            Console.WriteLine($"Login HTTP error: {ex.Message}");
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again later.";
            Console.WriteLine($"Login error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
