
@page "/cost-dashboard"
@using WorldLeaders.Shared.DTOs
@using System.Text.Json
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject ILogger<CostDashboard> Logger

@*
Context: Educational cost dashboard for 12-year-old players
Educational Objective: Teach digital resource awareness and budget management
Safety Requirements: Child-friendly presentation, positive messaging, educational value
*@

<PageTitle>üí∞ My Learning Costs - World Leaders Game</PageTitle>

<div class="retro-game-container">
    <div class="max-w-7xl mx-auto p-3 sm:p-4 lg:p-6">
        <!-- Header Section -->
        <div class="pixel-art-card green-theme mb-4 sm:mb-6">
            <div class="flex items-center justify-between flex-wrap gap-4">
                <div class="min-w-0 flex-1">
                    <h1 class="retro-title-compact text-lg sm:text-xl lg:text-2xl mb-2">
                        üí∞ MY LEARNING ADVENTURE COSTS
                    </h1>
                    <p class="retro-body text-sm sm:text-base">
                        See how much your world exploration and learning activities cost!
                    </p>
                </div>
                <div class="flex gap-2 sm:gap-4 flex-wrap">
                    @if (costSummary != null)
                    {
                        <div class="pixel-art-card-compact @(costSummary.IsOverDailyLimit ? "red-theme" : "green-theme")">
                            <div class="retro-subtitle text-sm sm:text-lg">¬£@costSummary.TotalCostGBP.ToString("F3")</div>
                            <div class="retro-body text-xs">Today's Cost</div>
                        </div>
                        <div class="pixel-art-card-compact green-theme">
                            <div class="retro-subtitle text-sm sm:text-lg">@costSummary.AverageEducationalScore.ToString("F0")%</div>
                            <div class="retro-body text-xs">Efficiency</div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Loading State -->
        @if (isLoading)
        {
            <div class="flex items-center justify-center p-6 sm:p-8">
                <div class="pixel-art-card green-theme">
                    <div class="flex items-center space-x-3">
                        <div class="retro-loading-spinner"></div>
                        <p class="retro-body text-sm sm:text-base">üîç Checking your learning costs...</p>
                    </div>
                </div>
            </div>
        }
        else if (costSummary != null)
        {
            <!-- Main Dashboard Content -->
            <div class="mobile-dashboard-grid">
                
                <!-- Daily Cost Progress -->
                <div class="dashboard-card cost-progress-card">
                    <h2 class="card-title">
                        <span class="card-icon">üìä</span>
                        Today's Budget Progress
                    </h2>
                    <div class="cost-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: @(GetProgressPercentage())%"></div>
                        </div>
                        <div class="progress-details">
                            <span class="current-cost">¬£@costSummary.TotalCostGBP.ToString("F3")</span>
                            <span class="separator">/</span>
                            <span class="budget-limit">¬£0.08</span>
                        </div>
                        <div class="progress-message">
                            @if (costSummary.IsOverDailyLimit)
                            {
                                <span class="warning-message">‚ö†Ô∏è You've used your daily budget! Great learning today!</span>
                            }
                            else
                            {
                                <span class="success-message">‚úÖ You have ¬£@((0.08m - costSummary.TotalCostGBP).ToString("F3")) left to explore!</span>
                            }
                        </div>
                    </div>
                </div>

                <!-- Service Breakdown -->
                <div class="dashboard-card services-card">
                    <h2 class="card-title">
                        <span class="card-icon">üîß</span>
                        What You're Using
                    </h2>
                    <div class="services-grid">
                        @foreach (var service in costSummary.ServiceBreakdown.Values)
                        {
                            <div class="service-item">
                                <div class="service-icon">@GetServiceIcon(service.ServiceName)</div>
                                <div class="service-details">
                                    <div class="service-name">@GetFriendlyServiceName(service.ServiceName)</div>
                                    <div class="service-cost">¬£@service.CostGBP.ToString("F4")</div>
                                    <div class="service-description">@GetServiceDescription(service.ServiceName)</div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Learning Efficiency -->
                <div class="dashboard-card efficiency-card">
                    <h2 class="card-title">
                        <span class="card-icon">üìö</span>
                        Learning Efficiency
                    </h2>
                    <div class="efficiency-display">
                        <div class="efficiency-circle">
                            <div class="efficiency-score">@costSummary.AverageEducationalScore.ToString("F0")%</div>
                            <div class="efficiency-label">Efficiency</div>
                        </div>
                        <div class="efficiency-message">
                            @if (costSummary.AverageEducationalScore >= 90)
                            {
                                <p class="excellent">üåü Excellent! You're learning very efficiently!</p>
                            }
                            else if (costSummary.AverageEducationalScore >= 75)
                            {
                                <p class="good">üëç Good job! Your learning is well-optimized!</p>
                            }
                            else
                            {
                                <p class="needs-improvement">üí° Try focusing on key learning activities to improve efficiency!</p>
                            }
                        </div>
                    </div>
                </div>

                <!-- Cost Forecast -->
                @if (costForecast != null && costForecast.Any())
                {
                    <div class="dashboard-card forecast-card">
                        <h2 class="card-title">
                            <span class="card-icon">üîÆ</span>
                            Next 7 Days Forecast
                        </h2>
                        <div class="forecast-chart">
                            @foreach (var forecast in costForecast.Take(7))
                            {
                                <div class="forecast-day">
                                    <div class="day-name">@forecast.ForecastDate.ToString("ddd")</div>
                                    <div class="forecast-bar">
                                        <div class="bar-fill" style="height: @(forecast.PredictedCostGBP / 0.08m * 100)%"></div>
                                    </div>
                                    <div class="day-cost">¬£@forecast.PredictedCostGBP.ToString("F3")</div>
                                </div>
                            }
                        </div>
                        <div class="forecast-note">
                            <p>üéØ This shows predicted costs based on your learning patterns!</p>
                        </div>
                    </div>
                }

                <!-- Educational Tips -->
                <div class="dashboard-card tips-card">
                    <h2 class="card-title">
                        <span class="card-icon">üí°</span>
                        Cost-Smart Learning Tips
                    </h2>
                    <div class="tips-list">
                        <div class="tip-item">
                            <span class="tip-icon">üéØ</span>
                            <span class="tip-text">Focus on specific countries to learn more efficiently!</span>
                        </div>
                        <div class="tip-item">
                            <span class="tip-icon">üó£Ô∏è</span>
                            <span class="tip-text">Practice pronunciation in short, focused sessions.</span>
                        </div>
                        <div class="tip-item">
                            <span class="tip-icon">ü§ñ</span>
                            <span class="tip-text">Ask specific questions to get better AI responses.</span>
                        </div>
                        <div class="tip-item">
                            <span class="tip-icon">üìö</span>
                            <span class="tip-text">Review previous lessons before asking new questions.</span>
                        </div>
                    </div>
                </div>

            </div>
        }
        else if (hasError)
        {
            <!-- Error State -->
            <div class="error-container">
                <div class="error-message">
                    <span class="error-icon">üòÖ</span>
                    <h2>Oops! Can't load cost information right now</h2>
                    <p class="retro-body">Don't worry - your learning progress is still being tracked!</p>
                    <button class="pixel-art-button" @onclick="LoadCostData">TRY AGAIN</button>
                </div>
            </div>
        }
    </div>
</div>

@code {

    @media (min-width: 640px) {
        .mobile-dashboard-grid {
            grid-template-columns: repeat(2, 1fr);
            gap: 1.25rem;
        }
        
        .cost-progress-card {
            grid-column: span 2;
        }
    }

    @media (min-width: 1024px) {
        .mobile-dashboard-grid {
            grid-template-columns: repeat(3, 1fr);
            gap: 1.5rem;
        }
        
        .cost-progress-card {
            grid-column: span 3;
        }
        
        .forecast-card {
            grid-column: span 2;
        }
    }

    /* Responsive Dashboard Cards */
    .dashboard-card {
        background: white;
        border-radius: 0.75rem;
        padding: 1rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border: 3px solid var(--pixel-black);
        transition: transform 0.3s ease;
        font-family: 'Press Start 2P', monospace;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .dashboard-card {
            padding: 1.25rem;
            border-radius: 1rem;
        }
    }

    @media (min-width: 1024px) {
        .dashboard-card {
            padding: 1.5rem;
        }
    }

    .dashboard-card:hover {
        transform: translateY(-2px);
    }

    .card-title {
        font-size: 0.875rem;
        font-weight: bold;
        margin: 0 0 1rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--text-primary);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .card-title {
            font-size: 1rem;
        }
    }

    @media (min-width: 1024px) {
        .card-title {
            font-size: 1.125rem;
        }
    }

    .card-icon {
        font-size: 1.25rem;
    }

    @media (min-width: 640px) {
        .card-icon {
            font-size: 1.5rem;
        }
    }

    /* Progress Bar */
    .progress-bar {
        background: #e0e0e0;
        border-radius: 0;
        height: 1.5rem;
        overflow: hidden;
        margin-bottom: 0.75rem;
        border: 2px solid var(--pixel-black);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .progress-bar {
            height: 2rem;
            margin-bottom: 1rem;
        }
    }

    .progress-fill {
        background: linear-gradient(90deg, #28a745, #20c997);
        height: 100%;
        transition: width 1s ease;
        image-rendering: pixelated;
    }

    .progress-details {
        text-align: center;
        font-size: 0.875rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .progress-details {
            font-size: 1rem;
        }
    }

    @media (min-width: 1024px) {
        .progress-details {
            font-size: 1.125rem;
        }
    }

    .current-cost {
        color: var(--text-primary);
    }

    .separator {
        color: #666;
        margin: 0 0.5rem;
    }

    .budget-limit {
        color: #666;
    }

    .progress-message {
        text-align: center;
        font-weight: bold;
        font-size: 0.75rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .progress-message {
            font-size: 0.875rem;
        }
    }

    .warning-message {
        color: #ffc107;
    }

    .success-message {
        color: #28a745;
    }

    /* Services Grid */
    .services-grid {
        display: grid;
        gap: 0.75rem;
    }

    @media (min-width: 640px) {
        .services-grid {
            gap: 1rem;
        }
    }

    .service-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: #f8f9fa;
        border-radius: 0;
        border: 2px solid var(--pixel-gray);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .service-item {
            gap: 1rem;
            padding: 1rem;
        }
    }

    .service-icon {
        font-size: 1.5rem;
        min-width: 2rem;
        text-align: center;
    }

    @media (min-width: 640px) {
        .service-icon {
            font-size: 2rem;
            min-width: 3rem;
        }
    }

    .service-name {
        font-weight: bold;
        color: var(--text-primary);
        font-size: 0.75rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .service-name {
            font-size: 0.875rem;
        }
    }

    .service-cost {
        font-weight: bold;
        color: #007bff;
        font-size: 0.875rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .service-cost {
            font-size: 1rem;
        }
    }

    .service-description {
        font-size: 0.625rem;
        color: #666;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .service-description {
            font-size: 0.75rem;
        }
    }

    /* Efficiency Display */
    .efficiency-display {
        text-align: center;
    }

    .efficiency-circle {
        width: 80px;
        height: 80px;
        border-radius: 0;
        background: linear-gradient(135deg, var(--retro-green-primary), var(--retro-green-dark));
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0 auto 1rem auto;
        border: 3px solid var(--pixel-black);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .efficiency-circle {
            width: 100px;
            height: 100px;
        }
    }

    @media (min-width: 1024px) {
        .efficiency-circle {
            width: 120px;
            height: 120px;
        }
    }

    .efficiency-score {
        font-size: 1.25rem;
        font-weight: bold;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .efficiency-score {
            font-size: 1.5rem;
        }
    }

    @media (min-width: 1024px) {
        .efficiency-score {
            font-size: 2rem;
        }
    }

    .efficiency-label {
        font-size: 0.625rem;
        opacity: 0.9;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .efficiency-label {
            font-size: 0.75rem;
        }
    }

    @media (min-width: 1024px) {
        .efficiency-label {
            font-size: 0.875rem;
        }
    }

    /* Forecast Chart */
    .forecast-chart {
        display: flex;
        justify-content: space-between;
        align-items: end;
        height: 100px;
        gap: 0.25rem;
        margin-bottom: 1rem;
    }

    @media (min-width: 640px) {
        .forecast-chart {
            height: 120px;
            gap: 0.5rem;
        }
    }

    @media (min-width: 1024px) {
        .forecast-chart {
            height: 150px;
        }
    }

    .forecast-day {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.125rem;
    }

    @media (min-width: 640px) {
        .forecast-day {
            gap: 0.25rem;
        }
    }

    .day-name {
        font-size: 0.625rem;
        font-weight: bold;
        color: #666;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .day-name {
            font-size: 0.75rem;
        }
    }

    .forecast-bar {
        background: #e0e0e0;
        width: 100%;
        height: 60px;
        border-radius: 0;
        position: relative;
        display: flex;
        align-items: end;
        border: 2px solid var(--pixel-black);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .forecast-bar {
            height: 80px;
        }
    }

    @media (min-width: 1024px) {
        .forecast-bar {
            height: 100px;
        }
    }

    .bar-fill {
        background: linear-gradient(180deg, #28a745, #20c997);
        width: 100%;
        min-height: 2px;
        transition: height 1s ease;
        image-rendering: pixelated;
    }

    .day-cost {
        font-size: 0.5rem;
        font-weight: bold;
        color: var(--text-primary);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .day-cost {
            font-size: 0.625rem;
        }
    }

    .forecast-note {
        text-align: center;
        color: #666;
        font-style: italic;
        font-size: 0.625rem;
    }

    @media (min-width: 640px) {
        .forecast-note {
            font-size: 0.75rem;
        }
    }

    /* Tips List */
    .tips-list {
        display: grid;
        gap: 0.5rem;
    }

    @media (min-width: 640px) {
        .tips-list {
            gap: 0.75rem;
        }
    }

    .tip-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        background: #f8f9fa;
        border-radius: 0;
        border-left: 4px solid #007bff;
        border-top: 2px solid var(--pixel-gray);
        border-right: 2px solid var(--pixel-gray);
        border-bottom: 2px solid var(--pixel-gray);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .tip-item {
            gap: 0.75rem;
            padding: 0.75rem;
        }
    }

    .tip-icon {
        font-size: 1rem;
        min-width: 1.25rem;
    }

    @media (min-width: 640px) {
        .tip-icon {
            font-size: 1.125rem;
            min-width: 1.5rem;
        }
    }

    .tip-text {
        color: var(--text-primary);
        font-weight: 500;
        font-size: 0.625rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .tip-text {
            font-size: 0.75rem;
        }
    }

    @media (min-width: 1024px) {
        .tip-text {
            font-size: 0.875rem;
        }
    }

    /* Loading and Error States */
    .loading-container, .error-container {
        text-align: center;
        padding: 2rem 1rem;
    }

    @media (min-width: 640px) {
        .loading-container, .error-container {
            padding: 3rem;
        }
    }

    .error-message {
        background: white;
        border-radius: 0;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        margin: 0 auto;
        border: 3px solid var(--pixel-black);
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .error-message {
            padding: 2rem;
        }
    }

    .error-icon {
        font-size: 3rem;
        margin-bottom: 1rem;
    }

    @media (min-width: 640px) {
        .error-icon {
            font-size: 4rem;
        }
    }

    /* Efficiency message colors */
    .excellent {
        color: #28a745;
        font-size: 0.75rem;
        image-rendering: pixelated;
    }

    .good {
        color: #ffc107;
        font-size: 0.75rem;
        image-rendering: pixelated;
    }

    .needs-improvement {
        color: #dc3545;
        font-size: 0.75rem;
        image-rendering: pixelated;
    }

    @media (min-width: 640px) {
        .excellent, .good, .needs-improvement {
            font-size: 0.875rem;
        }
    }
</style>
    }
    else if (hasError)
    {
        <!-- Error State -->
        <div class="error-container">
            <div class="error-message">
                <span class="error-icon">üòÖ</span>
                <h2>Oops! Can't load cost information right now</h2>
                <p class="retro-body">Don't worry - your learning progress is still being tracked!</p>
                <button class="pixel-art-button" @onclick="LoadCostData">TRY AGAIN</button>
            </div>
        </div>
    }
    </div>
</div>

<style>
    .cost-dashboard-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 1rem;
        font-family: 'Comic Neue', 'Arial Rounded', sans-serif;
    }

    .dashboard-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 1rem;
        padding: 2rem;
        color: white;
        margin-bottom: 2rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
    }

    .dashboard-title {
        font-size: 2.5rem;
        font-weight: bold;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .title-icon {
        font-size: 3rem;
    }

    .dashboard-subtitle {
        font-size: 1.2rem;
        margin: 0.5rem 0 0 0;
        opacity: 0.9;
    }

    .header-stats {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }

    .quick-stat {
        background: rgba(255, 255, 255, 0.2);
        border-radius: 0.75rem;
        padding: 1rem;
        text-align: center;
        min-width: 120px;
    }

    .quick-stat.warning {
        background: rgba(255, 193, 7, 0.3);
    }

    .quick-stat.success {
        background: rgba(40, 167, 69, 0.3);
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .dashboard-card {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        border: 3px solid #f0f0f0;
        transition: transform 0.3s ease;
    }

    .dashboard-card:hover {
        transform: translateY(-2px);
    }

    .card-title {
        font-size: 1.3rem;
        font-weight: bold;
        margin: 0 0 1rem 0;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: #333;
    }

    .card-icon {
        font-size: 1.5rem;
    }

    .cost-progress-card {
        grid-column: span 2;
    }

    .progress-bar {
        background: #e0e0e0;
        border-radius: 1rem;
        height: 2rem;
        overflow: hidden;
        margin-bottom: 1rem;
    }

    .progress-fill {
        background: linear-gradient(90deg, #28a745, #20c997);
        height: 100%;
        border-radius: 1rem;
        transition: width 1s ease;
    }

    .progress-details {
        text-align: center;
        font-size: 1.2rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .current-cost {
        color: #333;
    }

    .separator {
        color: #666;
        margin: 0 0.5rem;
    }

    .budget-limit {
        color: #666;
    }

    .progress-message {
        text-align: center;
        font-weight: bold;
    }

    .warning-message {
        color: #ffc107;
    }

    .success-message {
        color: #28a745;
    }

    .services-grid {
        display: grid;
        gap: 1rem;
    }

    .service-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 0.5rem;
    }

    .service-icon {
        font-size: 2rem;
        min-width: 3rem;
        text-align: center;
    }

    .service-name {
        font-weight: bold;
        color: #333;
    }

    .service-cost {
        font-weight: bold;
        color: #007bff;
        font-size: 1.1rem;
    }

    .service-description {
        font-size: 0.9rem;
        color: #666;
    }

    .efficiency-display {
        text-align: center;
    }

    .efficiency-circle {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea, #764ba2);
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        margin: 0 auto 1rem auto;
    }

    .efficiency-score {
        font-size: 2rem;
        font-weight: bold;
    }

    .efficiency-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .forecast-chart {
        display: flex;
        justify-content: space-between;
        align-items: end;
        height: 150px;
        gap: 0.5rem;
        margin-bottom: 1rem;
    }

    .forecast-day {
        flex: 1;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.25rem;
    }

    .day-name {
        font-size: 0.8rem;
        font-weight: bold;
        color: #666;
    }

    .forecast-bar {
        background: #e0e0e0;
        width: 100%;
        height: 100px;
        border-radius: 0.25rem;
        position: relative;
        display: flex;
        align-items: end;
    }

    .bar-fill {
        background: linear-gradient(180deg, #28a745, #20c997);
        width: 100%;
        border-radius: 0.25rem;
        min-height: 2px;
        transition: height 1s ease;
    }

    .day-cost {
        font-size: 0.7rem;
        font-weight: bold;
        color: #333;
    }

    .forecast-note {
        text-align: center;
        color: #666;
        font-style: italic;
    }

    .tips-list {
        display: grid;
        gap: 0.75rem;
    }

    .tip-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: #f8f9fa;
        border-radius: 0.5rem;
        border-left: 4px solid #007bff;
    }

    .tip-icon {
        font-size: 1.2rem;
        min-width: 1.5rem;
    }

    .tip-text {
        color: #333;
        font-weight: 500;
    }

    .loading-container, .error-container {
        text-align: center;
        padding: 3rem;
    }

    .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .spinner {
        width: 3rem;
        height: 3rem;
        border: 4px solid #e0e0e0;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .loading-text {
        font-size: 1.2rem;
        color: #666;
        font-weight: 500;
    }

    .error-message {
        background: white;
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        max-width: 400px;
        margin: 0 auto;
    }

    .error-icon {
        font-size: 4rem;
        margin-bottom: 1rem;
    }

    .retry-button {
        background: #007bff;
        color: white;
        border: none;
        border-radius: 0.5rem;
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        margin-top: 1rem;
    }

    .retry-button:hover {
        background: #0056b3;
    }

    /* Simplified responsive behavior */
    .dashboard-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
    }

    .header-stats {
        display: flex;
        gap: 1rem;
        flex-wrap: wrap;
    }
</style>

@code {
    private EnhancedCostSummaryDto? costSummary;
    private List<CostForecastData>? costForecast;
    private bool isLoading = true;
    private bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCostData();
    }

    private async Task LoadCostData()
    {
        isLoading = true;
        hasError = false;
        StateHasChanged();

        try
        {
            // Try to load from API first, fall back to mock data
            bool apiSuccess = false;
            
            try
            {
                // Load cost summary
                var summaryResponse = await Http.GetAsync("/api/costmanagement/enhanced-summary");
                if (summaryResponse.IsSuccessStatusCode)
                {
                    var summaryJson = await summaryResponse.Content.ReadAsStringAsync();
                    costSummary = JsonSerializer.Deserialize<EnhancedCostSummaryDto>(summaryJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                    apiSuccess = true;
                }

                // Load cost forecast
                var forecastResponse = await Http.GetAsync("/api/costmanagement/forecast");
                if (forecastResponse.IsSuccessStatusCode)
                {
                    var forecastJson = await forecastResponse.Content.ReadAsStringAsync();
                    costForecast = JsonSerializer.Deserialize<List<CostForecastData>>(forecastJson, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
                }
            }
            catch (Exception apiEx)
            {
                Logger.LogWarning(apiEx, "API not available, using mock data for demonstration");
                apiSuccess = false;
            }

            // If API fails, use mock data for demonstration
            if (!apiSuccess)
            {
                await LoadMockData();
            }

            Logger.LogInformation("Cost dashboard data loaded successfully");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading cost dashboard data");
            hasError = true;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadMockData()
    {
        // Simulate API delay
        await Task.Delay(800);

        // Create mock cost summary
        var mockServices = new Dictionary<string, CostServiceBreakdown>
        {
            ["AI"] = new("AI", 0.025m, 15, 0.0017m) 
            { 
                EducationalValueScore = 92m,
                LearningOutcomes = new List<string> { "Geography learning", "AI interaction skills" }
            },
            ["Speech"] = new("Speech", 0.012m, 8, 0.0015m) 
            { 
                EducationalValueScore = 88m,
                LearningOutcomes = new List<string> { "Pronunciation practice", "Language skills" }
            },
            ["Storage"] = new("Storage", 0.003m, 0, 0m) 
            { 
                EducationalValueScore = 85m,
                LearningOutcomes = new List<string> { "Progress tracking" }
            }
        };

        costSummary = new EnhancedCostSummaryDto(
            UserId: Guid.NewGuid(),
            Date: DateTime.UtcNow,
            TotalCostGBP: 0.040m,
            IsOverDailyLimit: false,
            RemainingBudgetGBP: 0.040m)
        {
            ServiceBreakdown = mockServices,
            AverageEducationalScore = 89m,
            LearningObjectivesAchieved = 3,
            ActiveLearningTime = TimeSpan.FromMinutes(45),
            IsEducationallyCompliant = true,
            ComplianceNotes = new List<string> { "All content age-appropriate", "COPPA compliant" }
        };

        // Create mock forecast data
        costForecast = new List<CostForecastData>();
        for (int i = 1; i <= 7; i++)
        {
            costForecast.Add(new CostForecastData(
                UserId: Guid.NewGuid(),
                ForecastDate: DateTime.UtcNow.AddDays(i),
                PredictedCostGBP: 0.035m + (decimal)(Random.Shared.NextDouble() * 0.03),
                ConfidenceScore: 0.85m,
                TrendFactors: new List<string> { "Normal usage pattern", "Weekend factor" })
            {
                UsagePattern = i % 2 == 0 ? "Light" : "Standard",
                PredictedEducationalScore = 85m + (decimal)(Random.Shared.NextDouble() * 10)
            });
        }
    }

    private double GetProgressPercentage()
    {
        if (costSummary == null) return 0;
        return Math.Min(100, (double)(costSummary.TotalCostGBP / 0.08m * 100));
    }

    private string GetServiceIcon(string serviceType) => serviceType.ToLowerInvariant() switch
    {
        "ai" or "openai" => "ü§ñ",
        "speech" => "üó£Ô∏è",
        "contentmoderation" => "üõ°Ô∏è",
        "storage" => "üíæ",
        "compute" => "‚ö°",
        _ => "üîß"
    };

    private string GetFriendlyServiceName(string serviceType) => serviceType.ToLowerInvariant() switch
    {
        "ai" or "openai" => "AI Learning Assistant",
        "speech" => "Speech & Pronunciation",
        "contentmoderation" => "Safety & Protection",
        "storage" => "Data Storage",
        "compute" => "Game Processing",
        _ => serviceType
    };

    private string GetServiceDescription(string serviceType) => serviceType.ToLowerInvariant() switch
    {
        "ai" or "openai" => "Your AI tutors and learning guides",
        "speech" => "Language learning and pronunciation practice",
        "contentmoderation" => "Keeping your content safe and appropriate",
        "storage" => "Saving your game progress and achievements",
        "compute" => "Running the game smoothly",
        _ => "Supporting your learning adventure"
    };
}
