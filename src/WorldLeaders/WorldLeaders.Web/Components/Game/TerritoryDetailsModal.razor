@* 
Territory Details Modal Component
Context: Educational geography and culture learning modal for 12-year-old players
Educational Objective: Deep learning about countries, cultures, languages, and geography
Safety Requirements: Age-appropriate content, encouraging messages, child-friendly design
*@
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Shared.Enums
@using WorldLeaders.Shared.Services
@inject ITerritoryService TerritoryService
@inject ILogger<TerritoryDetailsModal> Logger

@if (isVisible && selectedTerritory != null)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <div class="flex items-center justify-between">
                    <h2 class="text-2xl font-bold text-blue-800">
                        üåç @selectedTerritory.CountryName
                    </h2>
                    <button @onclick="CloseModal" class="close-button">
                        ‚ùå
                    </button>
                </div>
            </div>

            <div class="modal-body">
                @if (isLoading)
                {
                    <div class="text-center py-8">
                        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                        <p class="mt-2 text-blue-600">Loading details...</p>
                    </div>
                }
                else if (territoryDetails != null)
                {
                    <!-- Country Header with Flag -->
                    <div class="country-header">
                        <div class="flag-container">
                            <img src="@territoryDetails.FlagUrl" 
                                 alt="@territoryDetails.CountryName flag" 
                                 class="country-flag">
                            <div class="tier-badge tier-@territoryDetails.Tier.ToString().ToLower()">
                                @GetTierEmoji(territoryDetails.Tier) @territoryDetails.Tier
                            </div>
                        </div>
                        <div class="country-info">
                            <h3 class="text-xl font-bold text-blue-800">@territoryDetails.CountryName</h3>
                            <p class="text-blue-600">Capital: @territoryDetails.Capital</p>
                            <p class="text-blue-600">Region: @territoryDetails.Region</p>
                            <p class="text-sm text-gray-600">Population: @territoryDetails.Population.ToString("N0") people</p>
                        </div>
                    </div>

                    <!-- Educational Fact -->
                    <div class="educational-section bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-4">
                        <h4 class="font-bold text-yellow-800 mb-2">üß† Did You Know?</h4>
                        <p class="text-yellow-700">@territoryDetails.EducationalFact</p>
                    </div>

                    <!-- Territory Information -->
                    <div class="territory-stats grid grid-cols-2 gap-4 mb-4">
                        <div class="stat-card">
                            <div class="stat-icon">üí∞</div>
                            <div>
                                <p class="stat-label">Purchase Cost</p>
                                <p class="stat-value">$@territoryDetails.Cost</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">‚≠ê</div>
                            <div>
                                <p class="stat-label">Reputation Required</p>
                                <p class="stat-value">@territoryDetails.ReputationRequired%</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">üìà</div>
                            <div>
                                <p class="stat-label">Monthly Income</p>
                                <p class="stat-value">$@territoryDetails.MonthlyIncome</p>
                            </div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-icon">üåç</div>
                            <div>
                                <p class="stat-label">GDP</p>
                                <p class="stat-value">$@territoryDetails.GdpInBillions.ToString("F1")B</p>
                            </div>
                        </div>
                    </div>

                    <!-- Languages Section -->
                    @if (territoryDetails.OfficialLanguages.Any())
                    {
                        <div class="languages-section mb-4">
                            <h4 class="font-bold text-purple-800 mb-2">üó£Ô∏è Languages Spoken</h4>
                            <div class="flex flex-wrap gap-2">
                                @foreach (var language in territoryDetails.OfficialLanguages)
                                {
                                    <span class="language-tag">@language</span>
                                }
                            </div>
                            @if (territoryDetails.IsOwned)
                            {
                                <button @onclick="StartLanguageChallenge" class="btn-child-friendly bg-purple-500 mt-2">
                                    üéØ Practice Languages
                                </button>
                            }
                        </div>
                    }

                    <!-- Geographic Features -->
                    @if (territoryDetails.GeographicFeatures.Any())
                    {
                        <div class="features-section mb-4">
                            <h4 class="font-bold text-green-800 mb-2">üèîÔ∏è Geographic Features</h4>
                            <div class="feature-grid">
                                @foreach (var feature in territoryDetails.GeographicFeatures)
                                {
                                    <div class="feature-item">üåÑ @feature</div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Cultural Highlights -->
                    @if (territoryDetails.CulturalHighlights.Any())
                    {
                        <div class="culture-section mb-4">
                            <h4 class="font-bold text-orange-800 mb-2">üé≠ Cultural Highlights</h4>
                            <div class="culture-grid">
                                @foreach (var highlight in territoryDetails.CulturalHighlights)
                                {
                                    <div class="culture-item">üé® @highlight</div>
                                }
                            </div>
                        </div>
                    }

                    <!-- Cultural Context Button -->
                    <div class="cultural-context mb-4">
                        <button @onclick="LoadCulturalContext" 
                                class="btn-child-friendly bg-orange-500 w-full"
                                disabled="@isLoadingCulturalContext">
                            @if (isLoadingCulturalContext)
                            {
                                <span>üîÑ Loading...</span>
                            }
                            else
                            {
                                <span>üìö Learn More About @territoryDetails.CountryName</span>
                            }
                        </button>
                    </div>

                    <!-- Cultural Context Display -->
                    @if (culturalContext != null)
                    {
                        <div class="cultural-context-display fadeIn bg-blue-50 border-2 border-blue-200 rounded-lg p-4 mb-4">
                            <h4 class="font-bold text-blue-800 mb-3">üìñ About @culturalContext.CountryName</h4>
                            
                            <div class="context-section mb-3">
                                <h5 class="font-semibold text-blue-700 mb-1">üèõÔ∏è Historical Significance</h5>
                                <p class="text-blue-600 text-sm">@culturalContext.HistoricalSignificance</p>
                            </div>

                            <div class="context-section mb-3">
                                <h5 class="font-semibold text-blue-700 mb-1">üé™ Cultural Traditions</h5>
                                <ul class="text-blue-600 text-sm">
                                    @foreach (var tradition in culturalContext.CulturalTraditions)
                                    {
                                        <li>‚Ä¢ @tradition</li>
                                    }
                                </ul>
                            </div>

                            <div class="context-section mb-3">
                                <h5 class="font-semibold text-blue-700 mb-1">üó∫Ô∏è Geography Lesson</h5>
                                <p class="text-blue-600 text-sm">@culturalContext.GeographyLesson</p>
                            </div>

                            <div class="context-section">
                                <h5 class="font-semibold text-blue-700 mb-1">üí° Economics Lesson</h5>
                                <p class="text-blue-600 text-sm">@culturalContext.EconomicLesson</p>
                            </div>
                        </div>
                    }

                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        @if (territoryDetails.IsOwned)
                        {
                            <div class="owned-territory">
                                <div class="success-message">
                                    <span class="text-green-700 font-bold">üéâ You own this territory!</span>
                                    <p class="text-green-600 text-sm">It generates $@territoryDetails.MonthlyIncome monthly income</p>
                                </div>
                            </div>
                        }
                        else if (territoryDetails.IsAvailable)
                        {
                            <div class="acquisition-section">
                                @if (CanAfford(territoryDetails))
                                {
                                    <button @onclick="AcquireTerritory" 
                                            class="btn-child-friendly bg-green-500 w-full"
                                            disabled="@isAcquiring">
                                        @if (isAcquiring)
                                        {
                                            <span>üîÑ Acquiring...</span>
                                        }
                                        else
                                        {
                                            <span>üè¥ Acquire @territoryDetails.CountryName for $@territoryDetails.Cost</span>
                                        }
                                    </button>
                                }
                                else
                                {
                                    <div class="requirements-not-met">
                                        <p class="text-red-600 font-semibold mb-2">üìù Requirements to acquire:</p>
                                        @if (PlayerIncome < territoryDetails.Cost)
                                        {
                                            <p class="text-red-500 text-sm">üí∞ Need $@territoryDetails.Cost (you have $@PlayerIncome)</p>
                                        }
                                        @if (PlayerReputation < territoryDetails.ReputationRequired)
                                        {
                                            <p class="text-red-500 text-sm">‚≠ê Need @territoryDetails.ReputationRequired% reputation (you have @PlayerReputation%)</p>
                                        }
                                        <p class="text-blue-600 text-sm mt-2">üí° Keep playing to meet these requirements!</p>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="not-available">
                                <p class="text-gray-600">This territory is not currently available for acquisition.</p>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public TerritoryDto? SelectedTerritory { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<Guid> OnAcquire { get; set; }
    [Parameter] public EventCallback OnLanguageChallenge { get; set; }
    [Parameter] public int PlayerIncome { get; set; }
    [Parameter] public int PlayerReputation { get; set; }

    private TerritoryDetailDto? territoryDetails;
    private CulturalContextDto? culturalContext;
    private bool isLoading = false;
    private bool isLoadingCulturalContext = false;
    private bool isAcquiring = false;
    private bool isVisible => IsVisible;
    private TerritoryDto? selectedTerritory => SelectedTerritory;

    protected override async Task OnParametersSetAsync()
    {
        if (isVisible && selectedTerritory != null && 
            (territoryDetails == null || territoryDetails.Id != selectedTerritory.Id))
        {
            await LoadTerritoryDetails();
        }
    }

    private async Task LoadTerritoryDetails()
    {
        try
        {
            isLoading = true;
            culturalContext = null; // Reset cultural context
            StateHasChanged();

            territoryDetails = await TerritoryService.GetTerritoryDetailsAsync(selectedTerritory!.Id);
            
            Logger.LogInformation("Loaded details for territory {TerritoryName}", territoryDetails.CountryName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading territory details for {TerritoryId}", selectedTerritory?.Id);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCulturalContext()
    {
        if (territoryDetails == null) return;

        try
        {
            isLoadingCulturalContext = true;
            StateHasChanged();

            culturalContext = await TerritoryService.GetTerritoryCulturalContextAsync(territoryDetails.Id);
            
            Logger.LogInformation("Loaded cultural context for territory {TerritoryName}", territoryDetails.CountryName);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading cultural context for territory {TerritoryId}", territoryDetails.Id);
        }
        finally
        {
            isLoadingCulturalContext = false;
            StateHasChanged();
        }
    }

    private async Task AcquireTerritory()
    {
        if (territoryDetails == null) return;

        try
        {
            isAcquiring = true;
            StateHasChanged();

            await OnAcquire.InvokeAsync(territoryDetails.Id);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error acquiring territory {TerritoryId}", territoryDetails.Id);
        }
        finally
        {
            isAcquiring = false;
            StateHasChanged();
        }
    }

    private async Task StartLanguageChallenge()
    {
        await OnLanguageChallenge.InvokeAsync();
    }

    private async Task CloseModal()
    {
        await OnClose.InvokeAsync();
    }

    private bool CanAfford(TerritoryDetailDto territory)
    {
        return PlayerIncome >= territory.Cost && PlayerReputation >= territory.ReputationRequired;
    }

    private string GetTierEmoji(TerritoryTier tier) => tier switch
    {
        TerritoryTier.Small => "üèòÔ∏è",
        TerritoryTier.Medium => "üèôÔ∏è",
        TerritoryTier.Major => "üèõÔ∏è",
        _ => "üåç"
    };
}

<style>
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    z-index: 50;
}

.modal-content {
    background: white;
    border-radius: 0.75rem;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    max-width: 56rem;
    width: 100%;
    max-height: 100vh;
    overflow-y: auto;
    font-family: 'Comic Sans MS', cursive, sans-serif;
}

.modal-header {
    background: #dbeafe;
    padding: 1rem;
    border-bottom: 1px solid #bfdbfe;
}

.modal-body {
    padding: 1.5rem;
}

.close-button {
    color: #ef4444;
    font-size: 1.25rem;
    font-weight: 700;
    transition: color 0.2s;
    background: none;
    border: none;
    cursor: pointer;
}

.close-button:hover {
    color: #dc2626;
}

.country-header {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.flag-container {
    position: relative;
}

.country-flag {
    width: 8rem;
    height: 5rem;
    object-fit: cover;
    border-radius: 0.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
}

.tier-badge {
    position: absolute;
    top: -0.5rem;
    right: -0.5rem;
    font-size: 0.75rem;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-weight: 700;
}

.tier-small {
    background: #dcfce7;
    color: #166534;
}

.tier-medium {
    background: #fef3c7;
    color: #92400e;
}

.tier-major {
    background: #fecaca;
    color: #991b1b;
}

.country-info {
    flex: 1;
}

.educational-section {
    border-radius: 0.5rem;
}

.territory-stats {
    margin-bottom: 1rem;
}

.stat-card {
    background: #eff6ff;
    border: 1px solid #bfdbfe;
    border-radius: 0.5rem;
    padding: 0.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.stat-icon {
    font-size: 1.5rem;
}

.stat-label {
    font-size: 0.75rem;
    color: #6b7280;
    font-weight: 500;
}

.stat-value {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1e40af;
}

.language-tag {
    background: #f3e8ff;
    color: #7c3aed;
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.875rem;
    font-weight: 500;
}

.feature-grid, .culture-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 0.5rem;
}

/* Medium screens and up */
.feature-grid, .culture-grid {
    grid-template-columns: 1fr 1fr;
}

.feature-item, .culture-item {
    background: #f9fafb;
    color: #374151;
    padding: 0.5rem 0.75rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
}

.btn-child-friendly {
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 700;
    color: white;
    transition: all 0.2s;
    border: none;
    cursor: pointer;
}

.btn-child-friendly:hover {
    transform: scale(1.05);
}

.btn-child-friendly:active {
    transform: scale(0.95);
}

.btn-child-friendly:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
}

.success-message {
    background: #f0fdf4;
    border: 2px solid #86efac;
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
}

.requirements-not-met {
    background: #fef2f2;
    border: 2px solid #fca5a5;
    border-radius: 0.5rem;
    padding: 1rem;
}

.cultural-context-display {
    animation: fadeIn 0.3s ease-out;
}

.context-section {
    border-bottom: 1px solid #dbeafe;
    padding-bottom: 0.5rem;
}

.context-section:last-child {
    border-bottom: none;
    padding-bottom: 0;
}

/* Keyframes alternative */
.fadeIn {
    animation: fadeInAnimation 0.3s ease-out;
}

/* Using class-based approach for animations */
.fadeInAnimation {
    opacity: 1;
    transform: translateY(0);
}
</style>