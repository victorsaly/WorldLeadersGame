@*
Interactive Pixel Art World Map Component - Now using Adobe Stock Professional World Map
Context: Educational geography learning for 12-year-old players with high-quality world map background
Educational Objective: Visual world geography discovery through interactive map exploration
Safety Requirements: Child-friendly interactions, positive cultural representation
Map Source: AdobeStock_380033452.svg - Professional quality world map (6000x3000px)
*@
@using WorldLeaders.Shared.Models
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Shared.Enums
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime
@inject ILogger<PixelWorldMap> Logger

<div class="pixel-world-map retro-container" @onresize="OnWindowResize">
    <!-- Map Header with Child-Friendly Design -->
    <div class="map-header retro-header">
        <div class="flex items-center justify-between p-4">
            <div class="flex items-center gap-3">
                <div class="retro-icon">üó∫Ô∏è</div>
                <h2 class="text-2xl font-bold retro-title">Interactive World Map</h2>
            </div>
            
            <!-- Zoom Controls -->
            <div class="zoom-controls retro-controls">
                <button @onclick="() => SetZoomLevel(ZoomLevel.World)" 
                        class="retro-button @(CurrentZoom == ZoomLevel.World ? "active" : "")"
                        title="World View">
                    üåç
                </button>
                <button @onclick="() => SetZoomLevel(ZoomLevel.Continent)" 
                        class="retro-button @(CurrentZoom == ZoomLevel.Continent ? "active" : "")"
                        title="Continent View">
                    üåé
                </button>
                <button @onclick="() => SetZoomLevel(ZoomLevel.Region)" 
                        class="retro-button @(CurrentZoom == ZoomLevel.Region ? "active" : "")"
                        title="Region View">
                    üèûÔ∏è
                </button>
                <button @onclick="() => SetZoomLevel(ZoomLevel.Country)" 
                        class="retro-button @(CurrentZoom == ZoomLevel.Country ? "active" : "")"
                        title="Country View">
                    üèõÔ∏è
                </button>
            </div>
        </div>
        
        <!-- Educational Information Bar -->
        <div class="education-bar retro-info-bar">
            <div class="flex items-center justify-center gap-6 text-sm">
                <span class="retro-badge owned">üè¥ Owned: @OwnedCount</span>
                <span class="retro-badge available">‚ú® Available: @AvailableCount</span>
                <span class="retro-badge locked">üîí Locked: @LockedCount</span>
                <span class="retro-hint">üëÜ Click countries to explore!</span>
            </div>
        </div>
    </div>

    <!-- Main Map Container -->
    <div class="map-container" @onwheel="OnMapWheel" @onwheel:preventDefault="true">
        <!-- Background World Map Image -->
        <div class="world-map-background">
            <img src="/assets/maps/AdobeStock_380033452.svg" 
                 alt="Professional World Map" 
                 class="pixel-art world-map-image" 
                 style="transform: scale(@Viewport.ZoomScale) translate(@Viewport.Center.X px, @Viewport.Center.Y px)" />
        </div>
        
        <div class="map-viewport" style="transform: scale(@Viewport.ZoomScale) translate(@Viewport.Center.X px, @Viewport.Center.Y px)">
            
            <!-- SVG Overlay for Interactive Elements -->
            <svg class="world-map-svg" 
                 viewBox="0 0 @MapWidth @MapHeight" 
                 width="@MapWidth" 
                 height="@MapHeight">
                 @* Event handlers commented out until drag functionality is implemented
                 @onmousedown="OnMapMouseDown"
                 @onmousemove="OnMapMouseMove"
                 @onmouseup="OnMapMouseUp"
                 @ontouchstart="OnMapTouchStart"
                 @ontouchmove="OnMapTouchMove"
                 @ontouchend="OnMapTouchEnd"
                 *@
                
                <!-- Transparent background for interactions -->
                <rect width="100%" height="100%" fill="transparent" class="interaction-layer"/>
                
                <!-- Interactive Territories -->
                @foreach (var territory in InteractiveTerritories)
                {
                    <g class="territory-group @GetTerritoryStatusClass(territory.Status)" 
                       @onclick="() => OnTerritoryClick(territory)"
                       @onmouseenter="() => OnTerritoryHover(territory)"
                       @onmouseleave="OnTerritoryLeave">
                        
                        <!-- Territory Highlight Area (larger for better interaction) -->
                        <circle cx="@territory.Position.X" 
                                cy="@territory.Position.Y" 
                                r="@(territory.TouchRadius + 10)"
                                fill="@GetTerritoryColor(territory.Status)"
                                stroke="@GetTerritoryBorderColor(territory.Status)"
                                stroke-width="3"
                                opacity="0.7"
                                class="territory-highlight pixel-art"
                                data-country="@territory.CountryCode"/>
                        
                        <!-- Touch Zone for Mobile -->
                        <circle cx="@territory.Position.X" 
                                cy="@territory.Position.Y" 
                                r="@territory.TouchRadius"
                                fill="transparent"
                                class="touch-zone"
                                style="pointer-events: all;"/>
                        
                        <!-- Country Label with better visibility -->
                        <rect x="@(territory.Position.X - territory.CountryName.Length * 3)" 
                              y="@(territory.Position.Y + 15)"
                              width="@(territory.CountryName.Length * 6)" 
                              height="12"
                              fill="rgba(55, 71, 79, 0.8)"
                              stroke="#2E7D32"
                              stroke-width="1"
                              class="label-background pixel-art"/>
                        
                        <text x="@territory.Position.X" 
                              y="@(territory.Position.Y + 25)"
                              text-anchor="middle"
                              class="territory-label retro-text"
                              fill="white">
                            @territory.CountryName
                        </text>
                        
                        <!-- Flag Icon -->
                        @if (!string.IsNullOrEmpty(territory.Flag.SpritePath))
                        {
                            <image x="@(territory.Position.X - 8)" 
                                   y="@(territory.Position.Y - 20)"
                                   width="16" 
                                   height="12"
                                   href="@territory.Flag.SpritePath"
                                   class="flag-sprite pixel-art"/>
                        }
                        
                        <!-- Status Icon -->
                        <text x="@territory.Position.X" 
                              y="@(territory.Position.Y - 5)"
                              text-anchor="middle"
                              class="status-icon"
                              fill="@GetStatusIconColor(territory.Status)"
                              font-size="16">
                            @GetStatusIcon(territory.Status)
                        </text>
                        
                        <!-- Landmarks -->
                        @foreach (var landmark in territory.Landmarks.Take(3))
                        {
                            <image x="@(landmark.Position.X - 12)" 
                                   y="@(landmark.Position.Y - 12)"
                                   width="24" 
                                   height="24"
                                   href="@landmark.SpritePath"
                                   class="landmark-sprite pixel-art"
                                   title="@landmark.Name"/>
                        }
                    </g>
                }
                
                <!-- Player Indicator if zoomed to country -->
                @if (CurrentZoom == ZoomLevel.Country && SelectedTerritory != null)
                {
                    <g class="player-indicator">
                        <circle cx="@SelectedTerritory.Position.X" 
                                cy="@SelectedTerritory.Position.Y" 
                                r="30" 
                                fill="none" 
                                stroke="@ThemeColor" 
                                stroke-width="3" 
                                class="pulse-animation"/>
                    </g>
                }
            </svg>
        </div>
    </div>

    <!-- Territory Information Tooltip -->
    @if (HoveredTerritory != null && !IsMobile)
    {
        <div class="territory-tooltip retro-tooltip" 
             style="left: @TooltipX px; top: @TooltipY px;">
            <div class="tooltip-header">
                <img src="https://flagcdn.com/w40/@(HoveredTerritory.CountryCode.ToLower()).png" 
                     alt="@HoveredTerritory.CountryName flag" 
                     class="tooltip-flag"/>
                <h4 class="font-bold">@HoveredTerritory.CountryName</h4>
            </div>
            <div class="tooltip-content">
                <p><strong>Capital:</strong> @HoveredTerritory.Education.Capital</p>
                <p><strong>Population:</strong> @HoveredTerritory.Education.PopulationMillions M</p>
                <p><strong>Status:</strong> @GetStatusDisplay(HoveredTerritory.Status)</p>
                @if (HoveredTerritory.Education.FunFacts.Any())
                {
                    <p class="fun-fact">üí° @HoveredTerritory.Education.FunFacts.First()</p>
                }
            </div>
        </div>
    }

    <!-- Map Legend -->
    <div class="map-legend retro-legend">
        <h4 class="font-bold mb-2">üîç Map Legend</h4>
        <div class="legend-items">
            <div class="legend-item">
                <div class="legend-color owned"></div>
                <span>Your Territories</span>
            </div>
            <div class="legend-item">
                <div class="legend-color available"></div>
                <span>Available</span>
            </div>
            <div class="legend-item">
                <div class="legend-color locked"></div>
                <span>Locked</span>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (IsLoading)
    {
        <div class="loading-overlay retro-loading">
            <div class="loading-content">
                <div class="retro-spinner"></div>
                <p class="mt-4 retro-text">Loading world map...</p>
                <p class="text-sm retro-subtext">Preparing geography adventure!</p>
            </div>
        </div>
    }
</div>

@code {
    // Component Parameters
    [Parameter] public Guid PlayerId { get; set; }
    [Parameter] public List<TerritoryDto> PlayerTerritories { get; set; } = new();
    [Parameter] public List<TerritoryDto> AvailableTerritories { get; set; } = new();
    [Parameter] public EventCallback<TerritoryDto> OnTerritorySelected { get; set; }
    [Parameter] public EventCallback<ZoomLevel> OnZoomChanged { get; set; }
    [Parameter] public bool IsMobile { get; set; } = false;

    // Map Configuration
    private const int MapWidth = 1600; // Scaled down from 6000 for better performance
    private const int MapHeight = 800;  // Scaled down from 3000 for better performance
    private const string ThemeColor = "#2ea44f"; // Child designer's green theme
    private const string BackgroundColor = "#e6f3ff"; // Light blue ocean
    private const string GridColor = "#c0c0c0"; // Retro grid lines

    // Component State
    private List<InteractiveTerritory> InteractiveTerritories = new();
    private MapViewport Viewport = new();
    private ZoomLevel CurrentZoom = ZoomLevel.World;
    private InteractiveTerritory? HoveredTerritory;
    private InteractiveTerritory? SelectedTerritory;
    private bool IsLoading = true;
    private bool ShowGrid = true;
    
    // Tooltip positioning
    private int TooltipX = 0;
    private int TooltipY = 0;

    // Statistics
    private int OwnedCount => InteractiveTerritories.Count(t => t.Status == TerritoryStatus.Owned);
    private int AvailableCount => InteractiveTerritories.Count(t => t.Status == TerritoryStatus.Available);
    private int LockedCount => InteractiveTerritories.Count(t => t.Status == TerritoryStatus.Locked);

    protected override async Task OnInitializedAsync()
    {
        await LoadMapData();
        await SetupInteractiveTerritories();
        IsLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsLoading)
        {
            await UpdateTerritoryStatuses();
        }
    }

    private async Task LoadMapData()
    {
        try
        {
            // Initialize with sample data for demonstration
            // In production, this would load from a service
            await InitializeSampleTerritories();
            
            Logger.LogInformation("Loaded {Count} interactive territories for map", InteractiveTerritories.Count);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading map data for player {PlayerId}", PlayerId);
        }
    }

    private async Task InitializeSampleTerritories()
    {
        // Sample territories with pixel coordinates adjusted for Adobe Stock map (would be loaded from data in production)
        var sampleTerritories = new List<InteractiveTerritory>
        {
            new InteractiveTerritory
            {
                CountryCode = "US",
                CountryName = "United States",
                Position = new PixelCoordinate { X = 400, Y = 300 }, // Adjusted for Adobe Stock map
                Boundaries = new PixelBounds 
                { 
                    TopLeft = new PixelCoordinate { X = 350, Y = 280 },
                    BottomRight = new PixelCoordinate { X = 450, Y = 320 }
                },
                Status = TerritoryStatus.Available,
                Education = new EducationalInfo
                {
                    Capital = "Washington D.C.",
                    PopulationMillions = 331,
                    FunFacts = new List<string> { "Home to the world's first national parks!" }
                },
                Flag = new PixelFlag { SpritePath = "https://flagcdn.com/16x12/us.png", AltText = "US Flag" }
            },
            new InteractiveTerritory
            {
                CountryCode = "CA",
                CountryName = "Canada",
                Position = new PixelCoordinate { X = 400, Y = 200 }, // Adjusted for Adobe Stock map
                Boundaries = new PixelBounds 
                { 
                    TopLeft = new PixelCoordinate { X = 350, Y = 180 },
                    BottomRight = new PixelCoordinate { X = 450, Y = 220 }
                },
                Status = TerritoryStatus.Owned,
                Education = new EducationalInfo
                {
                    Capital = "Ottawa",
                    PopulationMillions = 38,
                    FunFacts = new List<string> { "Has two official languages: English and French!" }
                },
                Flag = new PixelFlag { SpritePath = "https://flagcdn.com/16x12/ca.png", AltText = "Canada Flag" }
            },
            new InteractiveTerritory
            {
                CountryCode = "GB",
                CountryName = "United Kingdom",
                Position = new PixelCoordinate { X = 800, Y = 250 }, // Adjusted for Adobe Stock map
                Boundaries = new PixelBounds 
                { 
                    TopLeft = new PixelCoordinate { X = 780, Y = 240 },
                    BottomRight = new PixelCoordinate { X = 820, Y = 260 }
                },
                Status = TerritoryStatus.Available,
                Education = new EducationalInfo
                {
                    Capital = "London",
                    PopulationMillions = 67,
                    FunFacts = new List<string> { "Big Ben is actually the name of the bell, not the tower!" }
                },
                Flag = new PixelFlag { SpritePath = "https://flagcdn.com/16x12/gb.png", AltText = "UK Flag" }
            },
            new InteractiveTerritory
            {
                CountryCode = "JP",
                CountryName = "Japan",
                Position = new PixelCoordinate { X = 1300, Y = 350 }, // Adjusted for Adobe Stock map
                Boundaries = new PixelBounds 
                { 
                    TopLeft = new PixelCoordinate { X = 1280, Y = 330 },
                    BottomRight = new PixelCoordinate { X = 1320, Y = 370 }
                },
                Status = TerritoryStatus.Locked,
                Education = new EducationalInfo
                {
                    Capital = "Tokyo",
                    PopulationMillions = 125,
                    FunFacts = new List<string> { "Has over 6,800 islands!" }
                },
                Flag = new PixelFlag { SpritePath = "https://flagcdn.com/16x12/jp.png", AltText = "Japan Flag" }
            },
            new InteractiveTerritory
            {
                CountryCode = "AU",
                CountryName = "Australia",
                Position = new PixelCoordinate { X = 1250, Y = 600 }, // Adjusted for Adobe Stock map
                Boundaries = new PixelBounds 
                { 
                    TopLeft = new PixelCoordinate { X = 1200, Y = 580 },
                    BottomRight = new PixelCoordinate { X = 1300, Y = 620 }
                },
                Status = TerritoryStatus.Available,
                Education = new EducationalInfo
                {
                    Capital = "Canberra",
                    PopulationMillions = 26,
                    FunFacts = new List<string> { "Home to unique animals like kangaroos and koalas!" }
                },
                Flag = new PixelFlag { SpritePath = "https://flagcdn.com/16x12/au.png", AltText = "Australia Flag" }
            }
        };

        InteractiveTerritories = sampleTerritories;
        await Task.CompletedTask;
    }

    private async Task SetupInteractiveTerritories()
    {
        await UpdateTerritoryStatuses();
    }

    private async Task UpdateTerritoryStatuses()
    {
        // Update territory statuses based on player ownership
        foreach (var territory in InteractiveTerritories)
        {
            if (PlayerTerritories.Any(t => t.CountryCode == territory.CountryCode))
            {
                territory.Status = TerritoryStatus.Owned;
            }
            else if (AvailableTerritories.Any(t => t.CountryCode == territory.CountryCode))
            {
                territory.Status = TerritoryStatus.Available;
            }
            else
            {
                territory.Status = TerritoryStatus.Locked;
            }
        }
        
        await Task.CompletedTask;
    }

    private async Task SetZoomLevel(ZoomLevel zoomLevel)
    {
        CurrentZoom = zoomLevel;
        
        // Adjust viewport scale based on zoom level
        Viewport.ZoomScale = zoomLevel switch
        {
            ZoomLevel.World => 1.0,
            ZoomLevel.Continent => 1.5,
            ZoomLevel.Region => 2.0,
            ZoomLevel.Country => 3.0,
            _ => 1.0
        };

        ShowGrid = zoomLevel >= ZoomLevel.Region;
        
        await OnZoomChanged.InvokeAsync(zoomLevel);
        StateHasChanged();
    }

    private async Task OnTerritoryClick(InteractiveTerritory territory)
    {
        try
        {
            SelectedTerritory = territory;
            
            // Find corresponding DTO and notify parent
            var territoryDto = AvailableTerritories.Concat(PlayerTerritories)
                .FirstOrDefault(t => t.CountryCode == territory.CountryCode);
            
            if (territoryDto != null)
            {
                await OnTerritorySelected.InvokeAsync(territoryDto);
            }
            
            Logger.LogInformation("Territory clicked: {CountryName} ({CountryCode})", 
                territory.CountryName, territory.CountryCode);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error handling territory click: {CountryCode}", territory.CountryCode);
        }
    }

    private void OnTerritoryHover(InteractiveTerritory territory)
    {
        HoveredTerritory = territory;
        // Tooltip positioning would be updated here
    }

    private void OnTerritoryLeave()
    {
        HoveredTerritory = null;
    }

    // Mouse and touch event handlers for map navigation - TODO: Implement dragging functionality
    // private void OnMapMouseDown(MouseEventArgs e) { /* TODO: Implement map dragging */ }
    // private void OnMapMouseUp(MouseEventArgs e) { /* TODO: Implement map dragging */ }
    // private void OnMapMouseMove(MouseEventArgs e) { /* Handle map dragging */ }
    // private void OnMapTouchStart(TouchEventArgs e) { /* TODO: Implement touch dragging */ }
    // private void OnMapTouchEnd(TouchEventArgs e) { /* TODO: Implement touch dragging */ }
    // private void OnMapTouchMove(TouchEventArgs e) { /* Handle touch dragging */ }
    
    private void OnMapWheel(WheelEventArgs e)
    {
        // Handle zoom with mouse wheel
        var newScale = Viewport.ZoomScale + (e.DeltaY > 0 ? -0.1 : 0.1);
        Viewport.ZoomScale = Math.Max(0.5, Math.Min(5.0, newScale));
        StateHasChanged();
    }

    private async Task OnWindowResize() => await Task.CompletedTask;

    // Helper methods for styling
    private string GetTerritoryStatusClass(TerritoryStatus status) => $"territory-{status.ToString().ToLower()}";
    
    private string GetTerritoryColor(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "#81C784",      // Light green
        TerritoryStatus.Available => "#64B5F6",  // Light blue
        TerritoryStatus.Locked => "#BDBDBD",     // Light gray
        _ => "#f3f4f6"
    };
    
    private string GetTerritoryBorderColor(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "#2E7D32",      // Dark green
        TerritoryStatus.Available => "#1565C0",  // Dark blue
        TerritoryStatus.Locked => "#616161",     // Dark gray
        _ => "#d1d5db"
    };
    
    private string GetLabelColor(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "#1B5E20",      // Very dark green
        TerritoryStatus.Available => "#0D47A1",  // Very dark blue
        TerritoryStatus.Locked => "#424242",     // Very dark gray
        _ => "#374151"
    };
    
    private string GetStatusIcon(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "üè¥",
        TerritoryStatus.Available => "‚ú®",
        TerritoryStatus.Locked => "üîí",
        _ => "‚ùì"
    };
    
    private string GetStatusIconColor(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "#2E7D32",
        TerritoryStatus.Available => "#1565C0",
        TerritoryStatus.Locked => "#616161",
        _ => "#9E9E9E"
    };
    
    private string GetStatusDisplay(TerritoryStatus status) => status switch
    {
        TerritoryStatus.Owned => "üè¥ Your Territory",
        TerritoryStatus.Available => "‚ú® Available",
        TerritoryStatus.Locked => "üîí Locked",
        _ => "‚ùì Unknown"
    };
    
    private string GetPolygonPoints(List<PixelCoordinate> points)
    {
        return string.Join(" ", points.Select(p => $"{p.X},{p.Y}"));
    }
}