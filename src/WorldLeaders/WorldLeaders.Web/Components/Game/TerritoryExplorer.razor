@* 
Enhanced Territory Explorer Component - Mobile-First Educational Design
Context: Educational game component for 12-year-old players learning world geography
Educational Objective: Interactive territory discovery with detailed country exploration
Safety Requirements: Age-appropriate content, positive messaging, child-friendly design
Retro Theme: 32-bit pixel art with green theme and retro typography
*@
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Shared.Enums
@using WorldLeaders.Shared.Services
@inject ITerritoryService TerritoryService
@inject ILogger<TerritoryExplorer> Logger

<div class="territory-explorer retro-gradient-nature rounded-xl p-4 sm:p-6 shadow-xl">
    <!-- Header -->
    <div class="text-center mb-6">
        <h2 class="retro-heading-xl text-white mb-3 text-shadow-retro">🌍 Territory Explorer</h2>
        <p class="retro-body text-white opacity-90">Discover amazing countries and learn about the world!</p>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-8">
            <div class="retro-loading-spinner mb-4"></div>
            <p class="retro-body text-white">Loading your world adventure...</p>
        </div>
    }
    else
    {
        <!-- Territory Filter Tabs -->
        <div class="mb-6">
            <div class="flex flex-wrap justify-center gap-2 mb-4">
                <button @onclick="() => FilterByTier(null)" 
                        class="btn-tab @(selectedTier == null ? "active" : "")">
                    🌍 All Countries
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Small)" 
                        class="btn-tab @(selectedTier == TerritoryTier.Small ? "active" : "")">
                    🏘️ Small Nations
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Medium)" 
                        class="btn-tab @(selectedTier == TerritoryTier.Medium ? "active" : "")">
                    🏙️ Medium Powers
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Major)" 
                        class="btn-tab @(selectedTier == TerritoryTier.Major ? "active" : "")">
                    🏛️ Major Powers
                </button>
            </div>
        </div>

        <!-- Owned Territories Section -->
        @if (ownedTerritories.Any())
        {
            <div class="mb-8 bg-green-50 border-2 border-green-200 rounded-lg p-4">
                <h3 class="text-2xl font-bold text-green-800 mb-4">🏴 Your Territories (@ownedTerritories.Count)</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var territory in ownedTerritories)
                    {
                        <div class="territory-card owned">
                            <div class="territory-flag">
                                <img src="https://flagcdn.com/w320/@(territory.CountryCode.ToLower()).png" 
                                     alt="@territory.CountryName flag" class="w-full h-20 object-cover rounded-t-lg">
                            </div>
                            <div class="p-3">
                                <h4 class="font-bold text-green-800 text-base">@territory.CountryName</h4>
                                <p class="text-base text-green-600">Monthly Income: $@territory.MonthlyIncome</p>
                                <p class="text-sm text-gray-600">Languages: @string.Join(", ", territory.OfficialLanguages.Take(2))</p>
                                <button @onclick="() => ViewTerritoryDetails(territory.Id)" 
                                        class="mt-2 territory-action-button">
                                    📖 Learn More
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="mt-4 text-center">
                    <p class="text-green-700 font-semibold text-lg">Total Monthly Income: $@totalMonthlyIncome</p>
                </div>
            </div>
        }

        <!-- Available Territories Section -->
        <div class="mb-6">
            <h3 class="text-2xl font-bold text-blue-800 mb-4">
                🗺️ Available Territories 
                @if (selectedTier != null)
                {
                    <span class="text-lg font-normal text-blue-600">(@GetTierDescription(selectedTier.Value))</span>
                }
            </h3>
            
            @if (filteredTerritories.Any())
            {
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    @foreach (var territory in filteredTerritories.Take(MAX_TERRITORIES_PER_PAGE))
                    {
                        <div class="territory-card available">
                            <div class="territory-flag relative">
                                <img src="https://flagcdn.com/w320/@(territory.CountryCode.ToLower()).png" 
                                     alt="@territory.CountryName flag" class="w-full h-20 object-cover rounded-t-lg">
                                <div class="tier-badge tier-@territory.Tier.ToString().ToLower()">
                                    @GetTierEmoji(territory.Tier)
                                </div>
                            </div>
                            <div class="p-4">
                                <h4 class="font-bold text-blue-800 text-base mb-2">@territory.CountryName</h4>
                                <div class="text-sm text-gray-600 mb-3">
                                    <p class="mb-1">💰 Cost: $@territory.Cost</p>
                                    <p class="mb-1">⭐ Reputation: @territory.ReputationRequired%</p>
                                    <p class="mb-1">📈 Income: $@territory.MonthlyIncome/month</p>
                                </div>
                                <div class="flex gap-2">
                                    <button @onclick="() => ViewTerritoryDetails(territory.Id)" 
                                            class="territory-action-button bg-blue-500">
                                        👁️ View
                                    </button>
                                    <button @onclick="() => AcquireTerritory(territory.Id)" 
                                            class="territory-action-button bg-green-500"
                                            disabled="@(!CanAffordTerritory(territory))">
                                        @if (CanAffordTerritory(territory))
                                        {
                                            <span>🏴 Buy</span>
                                        }
                                        else
                                        {
                                            <span>💡 Goal</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                @if (filteredTerritories.Count > 12)
                {
                    <div class="text-center mt-4">
                        <p class="text-blue-600">Showing 12 of @filteredTerritories.Count territories</p>
                        <button @onclick="LoadMoreTerritories" class="btn-child-friendly mt-2">
                            🔄 Load More
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-8 bg-gray-50 rounded-lg">
                    <p class="text-gray-600">🔍 No territories found in this category.</p>
                    <p class="text-sm text-gray-500">Try a different tier or check back later!</p>
                </div>
            }
        </div>
    }

    <!-- Educational Tips -->
    <div class="bg-yellow-50 border-2 border-yellow-200 rounded-lg p-4 mt-6">
        <h4 class="font-bold text-yellow-800 mb-3 text-lg">💡 Learning Tips</h4>
        <ul class="text-base text-yellow-700 space-y-2">
            <li>🎯 Start with Small Nations to build your reputation!</li>
            <li>🌍 Each territory teaches you about different countries and cultures</li>
            <li>💰 Territories generate monthly income to help you buy more</li>
            <li>🗣️ Learn the languages of your territories for bonus points!</li>
            <li>⭐ Higher reputation lets you acquire bigger, more valuable territories</li>
        </ul>
    </div>
</div>

@code {
    // Educational constants for child-friendly display
    private const int MAX_TERRITORIES_PER_PAGE = 12; // Show max 12 at a time for children
    
    [Parameter] public Guid PlayerId { get; set; }
    [Parameter] public EventCallback<TerritoryDto> OnTerritorySelected { get; set; }
    [Parameter] public int PlayerIncome { get; set; }
    [Parameter] public int PlayerReputation { get; set; }

    private List<TerritoryDto> availableTerritories = new();
    private List<TerritoryDto> ownedTerritories = new();
    private List<TerritoryDto> filteredTerritories = new();
    private TerritoryTier? selectedTier = null;
    private bool isLoading = true;
    private int totalMonthlyIncome = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTerritories();
    }

    private async Task LoadTerritories()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var availableTask = TerritoryService.GetAvailableTerritoriesAsync(PlayerId);
            var ownedTask = TerritoryService.GetPlayerTerritoriesAsync(PlayerId);
            var incomeTask = TerritoryService.CalculateMonthlyTerritoryIncomeAsync(PlayerId);

            await Task.WhenAll(availableTask, ownedTask, incomeTask);
            
            availableTerritories = await availableTask;
            ownedTerritories = await ownedTask;
            totalMonthlyIncome = await incomeTask;

            FilterByTier(selectedTier);

            Logger.LogInformation("Loaded {AvailableCount} available and {OwnedCount} owned territories for player {PlayerId}",
                availableTerritories.Count, ownedTerritories.Count, PlayerId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading territories for player {PlayerId}", PlayerId);
            // Show user-friendly error message
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterByTier(TerritoryTier? tier)
    {
        selectedTier = tier;
        filteredTerritories = tier == null 
            ? availableTerritories.OrderBy(t => t.Tier).ThenBy(t => t.Cost).ToList()
            : availableTerritories.Where(t => t.Tier == tier).OrderBy(t => t.Cost).ToList();
    }

    private async Task AcquireTerritory(Guid territoryId)
    {
        try
        {
            // This will be handled by a modal or separate component
            await OnTerritorySelected.InvokeAsync(filteredTerritories.First(t => t.Id == territoryId));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error selecting territory {TerritoryId}", territoryId);
        }
    }

    private async Task ViewTerritoryDetails(Guid territoryId)
    {
        try
        {
            // This will open a details modal
            await OnTerritorySelected.InvokeAsync(filteredTerritories.Concat(ownedTerritories).First(t => t.Id == territoryId));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error viewing territory details {TerritoryId}", territoryId);
        }
    }

    private void LoadMoreTerritories()
    {
        // Implementation for pagination if needed
    }

    private bool CanAffordTerritory(TerritoryDto territory)
    {
        return PlayerIncome >= territory.Cost && PlayerReputation >= territory.ReputationRequired;
    }

    private string GetTierDescription(TerritoryTier tier) => tier switch
    {
        TerritoryTier.Small => "Easy to acquire, perfect for beginners!",
        TerritoryTier.Medium => "Moderate challenge, good income potential",
        TerritoryTier.Major => "Advanced territories for experienced leaders",
        _ => "All territories"
    };

    private string GetTierEmoji(TerritoryTier tier) => tier switch
    {
        TerritoryTier.Small => "🏘️",
        TerritoryTier.Medium => "🏙️", 
        TerritoryTier.Major => "🏛️",
        _ => "🌍"
    };
}

<style>
/* Retro Territory Explorer Styling */
.territory-explorer {
    font-family: 'Press Start 2P', monospace;
    image-rendering: pixelated;
}

.retro-gradient-nature {
    background: linear-gradient(135deg, #22c55e 0%, #16a34a 50%, #15803d 100%);
}

.retro-heading-xl {
    font-family: 'Press Start 2P', monospace;
    font-size: 24px;
    line-height: 1.2;
    letter-spacing: 2px;
}

.retro-heading-lg {
    font-family: 'Press Start 2P', monospace;
    font-size: 18px;
    line-height: 1.3;
    letter-spacing: 1px;
}

.retro-heading-md {
    font-family: 'Press Start 2P', monospace;
    font-size: 16px;
    line-height: 1.4;
    letter-spacing: 1px;
}

.retro-heading-sm {
    font-family: 'Press Start 2P', monospace;
    font-size: 14px;
    line-height: 1.4;
    letter-spacing: 0.5px;
}

.retro-body {
    font-family: 'Orbitron', monospace;
    font-size: 14px;
    line-height: 1.6;
    font-weight: 500;
}

.retro-body-small {
    font-family: 'Orbitron', monospace;
    font-size: 12px;
    line-height: 1.5;
    font-weight: 500;
}

.text-shadow-retro {
    text-shadow: 2px 2px 0 #000;
}

.retro-loading-spinner {
    width: 48px;
    height: 48px;
    border: 4px solid rgba(255, 255, 255, 0.3);
    border-top: 4px solid #fff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.retro-tab-button {
    padding: 0.75rem 1rem;
    font-family: 'Press Start 2P', monospace;
    font-size: 10px;
    font-weight: bold;
    border: 3px solid #000;
    background: #fff;
    color: #000;
    transition: all 0.2s ease-in-out;
    image-rendering: pixelated;
    box-shadow: 3px 3px 0 #000;
}

.retro-tab-button:hover {
    transform: translate(-1px, -1px);
    box-shadow: 4px 4px 0 #000;
}

.retro-tab-button.active {
    background: #22c55e;
    color: #fff;
    transform: translate(1px, 1px);
    box-shadow: 1px 1px 0 #000;
}

.retro-card {
    background: #fff;
    border: 4px solid #000;
    box-shadow: 4px 4px 0 rgba(0, 0, 0, 0.5);
    image-rendering: pixelated;
}

.retro-card-owned {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    border-color: #16a34a;
}

.retro-territory-card {
    background: #fff;
    border: 3px solid #000;
    box-shadow: 3px 3px 0 rgba(0, 0, 0, 0.5);
    overflow: hidden;
    image-rendering: pixelated;
}

.retro-territory-card.owned {
    background: linear-gradient(135deg, #dcfce7 0%, #bbf7d0 100%);
    border-color: #16a34a;
}

.retro-territory-card.available {
    background: #fff;
    border-color: #000;
}

.retro-territory-card:hover {
    box-shadow: 5px 5px 0 rgba(0, 0, 0, 0.5);
}

.pixel-art-image {
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
}

.retro-tier-badge {
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    padding: 0.25rem 0.5rem;
    border: 2px solid #000;
    font-weight: bold;
}

.tier-small {
    background: #dcfce7;
    color: #166534;
}

.tier-medium {
    background: #fef3c7;
    color: #92400e;
}

.tier-major {
    background: #fecaca;
    color: #991b1b;
}

.retro-button {
    padding: 0.75rem 1.5rem;
    font-family: 'Press Start 2P', monospace;
    font-size: 12px;
    font-weight: bold;
    border: 3px solid #000;
    background: #fff;
    color: #000;
    transition: all 0.1s ease-in-out;
    image-rendering: pixelated;
    box-shadow: 3px 3px 0 #000;
    cursor: pointer;
}

.retro-button:hover {
    transform: translate(-1px, -1px);
    box-shadow: 4px 4px 0 #000;
}

.retro-button:active {
    transform: translate(1px, 1px);
    box-shadow: 1px 1px 0 #000;
}

.retro-button-small {
    padding: 0.5rem 0.75rem;
    font-family: 'Press Start 2P', monospace;
    font-size: 8px;
    font-weight: bold;
    border: 2px solid #000;
    background: #fff;
    color: #000;
    transition: all 0.1s ease-in-out;
    image-rendering: pixelated;
    box-shadow: 2px 2px 0 #000;
    cursor: pointer;
}

.retro-button-small:hover {
    transform: translate(-1px, -1px);
    box-shadow: 3px 3px 0 #000;
}

.retro-button-small:active {
    transform: translate(1px, 1px);
    box-shadow: 1px 1px 0 #000;
}

.retro-button-small:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: 2px 2px 0 #000;
}

.retro-territories-grid {
    gap: 1rem;
}

@media (max-width: 640px) {
    .retro-territories-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: 0.75rem;
    }
    
    .retro-heading-xl {
        font-size: 18px;
    }
    
    .retro-heading-lg {
        font-size: 14px;
    }
    
    .retro-tab-button {
        font-size: 8px;
        padding: 0.5rem 0.75rem;
    }
}
</style>