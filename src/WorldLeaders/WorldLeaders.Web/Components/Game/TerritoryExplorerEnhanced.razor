@* 
Enhanced Territory Explorer Component - Mobile-First Educational Design
Context: Educational game component for 12-year-old players learning world geography
Educational Objective: Interactive territory discovery with detailed country exploration
Safety Requirements: Age-appropriate content, positive messaging, child-friendly design
Retro Theme: 32-bit pixel art with green theme and retro typography
*@
@using WorldLeaders.Shared.DTOs
@using WorldLeaders.Shared.Enums
@using WorldLeaders.Shared.Services
@inject ITerritoryService TerritoryService
@inject ILogger<TerritoryExplorerEnhanced> Logger

<div class="territory-explorer retro-gradient-nature rounded-xl p-4 sm:p-6 shadow-xl">
    <!-- Header -->
    <div class="text-center mb-6">
        <h2 class="retro-heading-xl text-white mb-3 text-shadow-retro">üåç Territory Explorer</h2>
        <p class="retro-body text-white opacity-90">Discover amazing countries and learn about the world!</p>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-8">
            <div class="retro-loading-spinner mb-4"></div>
            <p class="retro-body text-white">Loading your world adventure...</p>
        </div>
    }
    else
    {
        <!-- Territory Filter Tabs -->
        <div class="mb-6">
            <div class="flex flex-wrap justify-center gap-2 mb-4">
                <button @onclick="() => FilterByTier(null)" 
                        class="retro-tab @(selectedTier == null ? "active" : "")">
                    üåç All Countries
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Small)" 
                        class="retro-tab @(selectedTier == TerritoryTier.Small ? "active" : "")">
                    üèòÔ∏è Small Nations
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Medium)" 
                        class="retro-tab @(selectedTier == TerritoryTier.Medium ? "active" : "")">
                    üèôÔ∏è Medium Powers
                </button>
                <button @onclick="() => FilterByTier(TerritoryTier.Major)" 
                        class="retro-tab @(selectedTier == TerritoryTier.Major ? "active" : "")">
                    üèõÔ∏è Major Powers
                </button>
            </div>
        </div>

        <!-- Owned Territories Section -->
        @if (ownedTerritories.Any())
        {
            <div class="mb-8 retro-card-owned">
                <h3 class="retro-heading-lg text-green-800 mb-4">üè¥ Your Empire (@ownedTerritories.Count Countries)</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    @foreach (var territory in ownedTerritories)
                    {
                        <div class="territory-card-owned">
                            <div class="territory-flag">
                                <img src="https://flagcdn.com/w320/@(territory.CountryCode.ToLower()).png" 
                                     alt="@territory.CountryName flag" 
                                     class="pixel-art-image w-full h-16 object-cover rounded-t-lg">
                            </div>
                            <div class="p-3">
                                <h4 class="retro-heading-sm text-green-800">@territory.CountryName</h4>
                                <p class="retro-body text-green-600">Monthly Income: $@territory.MonthlyIncome</p>
                                <p class="text-xs text-gray-600 mb-2">Languages: @string.Join(", ", territory.OfficialLanguages.Take(2))</p>
                                <button @onclick="() => OpenCountryDetails(territory.Id)" 
                                        class="retro-button-explore w-full">
                                    üìñ Explore Country
                                </button>
                            </div>
                        </div>
                    }
                </div>
                <div class="mt-4 text-center retro-income-display">
                    <p class="retro-heading-sm text-green-700">üí∞ Total Monthly Income: $@totalMonthlyIncome</p>
                </div>
            </div>
        }

        <!-- Available Territories Section -->
        <div class="mb-6">
            <h3 class="retro-heading-lg text-white mb-4">
                üó∫Ô∏è Available Territories 
                @if (selectedTier != null)
                {
                    <span class="retro-body text-white opacity-80">(@GetTierDescription(selectedTier.Value))</span>
                }
            </h3>
            
            @if (filteredTerritories.Any())
            {
                <!-- Mobile: Show 2 countries at a time | Desktop: Show more -->
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
                    @foreach (var territory in GetPaginatedTerritories())
                    {
                        <div class="territory-card-available">
                            <div class="territory-flag relative">
                                <img src="https://flagcdn.com/w320/@(territory.CountryCode.ToLower()).png" 
                                     alt="@territory.CountryName flag" 
                                     class="pixel-art-image w-full h-20 object-cover rounded-t-lg">
                                <div class="tier-badge tier-@territory.Tier.ToString().ToLower()">
                                    @GetTierEmoji(territory.Tier)
                                </div>
                            </div>
                            <div class="p-4">
                                <h4 class="retro-heading-sm text-blue-800 mb-2">@territory.CountryName</h4>
                                <div class="territory-stats mb-3">
                                    <div class="stat-row">
                                        <span class="stat-icon">üí∞</span>
                                        <span class="stat-label">Cost:</span>
                                        <span class="stat-value">$@territory.Cost.ToString("N0")</span>
                                    </div>
                                    <div class="stat-row">
                                        <span class="stat-icon">‚≠ê</span>
                                        <span class="stat-label">Reputation:</span>
                                        <span class="stat-value">@territory.ReputationRequired%</span>
                                    </div>
                                    <div class="stat-row">
                                        <span class="stat-icon">üìà</span>
                                        <span class="stat-label">Income:</span>
                                        <span class="stat-value">$@territory.MonthlyIncome/month</span>
                                    </div>
                                    <div class="stat-row">
                                        <span class="stat-icon">üó£Ô∏è</span>
                                        <span class="stat-label">Languages:</span>
                                        <span class="stat-value-small">@string.Join(", ", territory.OfficialLanguages.Take(2))</span>
                                    </div>
                                </div>
                                <div class="flex flex-col gap-2">
                                    <button @onclick="() => OpenCountryDetails(territory.Id)" 
                                            class="retro-button-explore w-full">
                                        üåç Explore Country
                                    </button>
                                    <button @onclick="() => PurchaseTerritory(territory.Id)" 
                                            class="retro-button-purchase w-full"
                                            disabled="@(!CanAffordTerritory(territory))">
                                        @if (CanAffordTerritory(territory))
                                        {
                                            <span>üè¥ Purchase Territory</span>
                                        }
                                        else if (PlayerIncome < territory.Cost)
                                        {
                                            <span>üíé Need $@((territory.Cost - PlayerIncome).ToString("N0")) More</span>
                                        }
                                        else
                                        {
                                            <span>üéØ Need @((territory.ReputationRequired - PlayerReputation))% Reputation</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Mobile-friendly pagination -->
                <div class="flex justify-center items-center gap-4 mt-6">
                    <button @onclick="PreviousPage" 
                            class="retro-button-nav" 
                            disabled="@(currentPage <= 1)">
                        ‚¨ÖÔ∏è Previous
                    </button>
                    <div class="retro-page-info">
                        <span class="retro-body text-white">Page @currentPage of @totalPages</span>
                        <div class="text-xs text-white opacity-70 mt-1">
                            @GetCurrentPageItemsDescription()
                        </div>
                    </div>
                    <button @onclick="NextPage" 
                            class="retro-button-nav" 
                            disabled="@(currentPage >= totalPages)">
                        Next ‚û°Ô∏è
                    </button>
                </div>
            }
            else
            {
                <div class="text-center py-8 retro-card rounded-lg">
                    <div class="text-4xl mb-4">üîç</div>
                    <p class="retro-heading-sm text-gray-700 mb-2">No territories found in this category!</p>
                    <p class="retro-body text-gray-600">Try a different tier or check back later for new adventures!</p>
                </div>
            }
        }

        <!-- Educational Tips -->
        <div class="retro-tips-section mt-6">
            <h4 class="retro-heading-sm text-yellow-800 mb-3">üí° Explorer Tips</h4>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3">
                <div class="tip-card">
                    <div class="text-2xl mb-2">üéØ</div>
                    <p class="retro-body">Start with Small Nations to build reputation!</p>
                </div>
                <div class="tip-card">
                    <div class="text-2xl mb-2">üåç</div>
                    <p class="retro-body">Each territory teaches about different cultures!</p>
                </div>
                <div class="tip-card">
                    <div class="text-2xl mb-2">üí∞</div>
                    <p class="retro-body">Territories generate monthly income!</p>
                </div>
                <div class="tip-card">
                    <div class="text-2xl mb-2">üó£Ô∏è</div>
                    <p class="retro-body">Learn languages for bonus points!</p>
                </div>
            </div>
        </div>
    }
</div>

<!-- Country Detail Modal -->
@if (showCountryDetails && selectedTerritoryDetails != null)
{
    <div class="country-modal-overlay" @onclick="CloseCountryDetails">
        <div class="country-modal-content" @onclick:stopPropagation="true">
            <div class="country-modal-header">
                <div class="flex items-center gap-4">
                    <img src="https://flagcdn.com/w320/@(selectedTerritoryDetails.CountryCode.ToLower()).png" 
                         alt="@selectedTerritoryDetails.CountryName flag" 
                         class="pixel-art-image w-16 h-12 object-cover rounded border-2 border-white">
                    <div>
                        <h2 class="retro-heading-lg text-white">@selectedTerritoryDetails.CountryName</h2>
                        <p class="retro-body text-white opacity-80">@selectedTerritoryDetails.Capital, @selectedTerritoryDetails.Region</p>
                    </div>
                </div>
                <button @onclick="CloseCountryDetails" class="retro-button-close">‚ùå</button>
            </div>

            <div class="country-modal-body">
                <!-- Country Navigation Tabs -->
                <div class="country-tabs mb-6">
                    <button @onclick="() => SetActiveTab(\"overview\")" 
                            class="country-tab @(activeTab == "overview" ? "active" : "")">
                        üåç Overview
                    </button>
                    <button @onclick="() => SetActiveTab(\"geography\")" 
                            class="country-tab @(activeTab == "geography" ? "active" : "")">
                        üèîÔ∏è Geography
                    </button>
                    <button @onclick="() => SetActiveTab(\"language\")" 
                            class="country-tab @(activeTab == "language" ? "active" : "")">
                        üó£Ô∏è Languages
                    </button>
                    <button @onclick="() => SetActiveTab(\"happiness\")" 
                            class="country-tab @(activeTab == "happiness" ? "active" : "")">
                        üòä Happiness
                    </button>
                    <button @onclick="() => SetActiveTab(\"strategy\")" 
                            class="country-tab @(activeTab == "strategy" ? "active" : "")">
                        üîÆ Strategy Oracle
                    </button>
                </div>

                <!-- Tab Content -->
                <div class="tab-content">
                    @if (activeTab == "overview")
                    {
                        <div class="overview-section">
                            <h3 class="retro-heading-sm mb-4">üìö Learn About @selectedTerritoryDetails.CountryName</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="info-card">
                                    <h4 class="retro-heading-sm text-blue-700 mb-3">Basic Facts</h4>
                                    <div class="fact-list">
                                        <div class="fact-item">
                                            <span class="fact-icon">üèõÔ∏è</span>
                                            <span>Capital: @selectedTerritoryDetails.Capital</span>
                                        </div>
                                        <div class="fact-item">
                                            <span class="fact-icon">üë•</span>
                                            <span>Population: @selectedTerritoryDetails.Population.ToString("N0")</span>
                                        </div>
                                        <div class="fact-item">
                                            <span class="fact-icon">üí∞</span>
                                            <span>GDP: $@selectedTerritoryDetails.GdpInBillions.ToString("N1") Billion</span>
                                        </div>
                                        <div class="fact-item">
                                            <span class="fact-icon">üíµ</span>
                                            <span>Currency: @string.Join(", ", selectedTerritoryDetails.Currencies)</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="info-card">
                                    <h4 class="retro-heading-sm text-blue-700 mb-3">Cultural Highlights</h4>
                                    <div class="highlight-list">
                                        @foreach (var highlight in selectedTerritoryDetails.CulturalHighlights.Take(4))
                                        {
                                            <div class="highlight-item">
                                                <span class="highlight-bullet">üé®</span>
                                                <span>@highlight</span>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="educational-fact mt-6">
                                <h4 class="retro-heading-sm text-green-700 mb-3">üéì Did You Know?</h4>
                                <p class="retro-body bg-green-50 p-4 rounded-lg border-l-4 border-green-400">
                                    @selectedTerritoryDetails.EducationalFact
                                </p>
                            </div>
                        </div>
                    }
                    else if (activeTab == "geography")
                    {
                        <div class="geography-section">
                            <h3 class="retro-heading-sm mb-4">üèîÔ∏è Geographic Features of @selectedTerritoryDetails.CountryName</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div class="info-card">
                                    <h4 class="retro-heading-sm text-blue-700 mb-3">Location Information</h4>
                                    <div class="fact-list">
                                        <div class="fact-item">
                                            <span class="fact-icon">üåç</span>
                                            <span>Region: @selectedTerritoryDetails.Region</span>
                                        </div>
                                        <div class="fact-item">
                                            <span class="fact-icon">üìç</span>
                                            <span>Subregion: @selectedTerritoryDetails.Subregion</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="info-card">
                                    <h4 class="retro-heading-sm text-blue-700 mb-3">Natural Features</h4>
                                    <div class="feature-grid">
                                        @foreach (var feature in selectedTerritoryDetails.GeographicFeatures)
                                        {
                                            <div class="feature-tag">üèûÔ∏è @feature</div>
                                        }
                                    </div>
                                </div>
                            </div>

                            <div class="geography-lesson mt-6">
                                <h4 class="retro-heading-sm text-green-700 mb-3">üó∫Ô∏è Geography Lesson</h4>
                                <p class="retro-body bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
                                    Learn about @selectedTerritoryDetails.CountryName's location, climate, and natural features that make it unique! 
                                    This country is known for its diverse landscapes and geographic importance in the @selectedTerritoryDetails.Region region.
                                </p>
                            </div>
                        </div>
                    }
                    else if (activeTab == "language")
                    {
                        <div class="language-section">
                            <h3 class="retro-heading-sm mb-4">üó£Ô∏è Languages of @selectedTerritoryDetails.CountryName</h3>
                            
                            <div class="languages-grid">
                                @foreach (var language in selectedTerritoryDetails.OfficialLanguages.Take(6))
                                {
                                    <div class="language-card">
                                        <h4 class="retro-heading-sm text-purple-700 mb-3">@GetLanguageName(language)</h4>
                                        
                                        <div class="common-phrases">
                                            <h5 class="font-bold text-sm mb-2">Common Words:</h5>
                                            @foreach (var phrase in GetCommonPhrases(language))
                                            {
                                                <div class="phrase-item">
                                                    <div class="phrase-text">
                                                        <span class="phrase-english">@phrase.English</span>
                                                        <span class="phrase-local">@phrase.Local</span>
                                                    </div>
                                                    <div class="phrase-pronunciation">
                                                        <span class="pronunciation-guide">üó£Ô∏è @phrase.Pronunciation</span>
                                                        <button @onclick="() => PlayPronunciation(phrase.Local, language)" 
                                                                class="retro-button-tiny">
                                                            üîä Listen
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="language-learning-tip mt-6">
                                <h4 class="retro-heading-sm text-green-700 mb-3">üí° Language Learning Tip</h4>
                                <p class="retro-body bg-purple-50 p-4 rounded-lg border-l-4 border-purple-400">
                                    Learning to say "Hello" in different languages is a great way to show respect for other cultures! 
                                    Practice these phrases and you'll earn bonus reputation points when you acquire this territory.
                                </p>
                            </div>
                        </div>
                    }
                    else if (activeTab == "happiness")
                    {
                        <div class="happiness-section">
                            <h3 class="retro-heading-sm mb-4">üòä What Makes @selectedTerritoryDetails.CountryName Happy?</h3>
                            
                            <div class="happiness-strategies">
                                @foreach (var strategy in GetHappinessStrategies(selectedTerritoryDetails))
                                {
                                    <div class="strategy-card">
                                        <div class="strategy-header">
                                            <span class="strategy-icon">@strategy.Icon</span>
                                            <h4 class="retro-heading-sm text-green-700">@strategy.Title</h4>
                                        </div>
                                        <p class="retro-body text-gray-700 mb-3">@strategy.Description</p>
                                        <div class="strategy-benefits">
                                            <span class="benefit-label">Expected Benefits:</span>
                                            <div class="benefits-list">
                                                @foreach (var benefit in strategy.Benefits)
                                                {
                                                    <span class="benefit-tag">@benefit</span>
                                                }
                                            </div>
                                        </div>
                                        <div class="strategy-income">
                                            <span class="income-boost">üí∞ Potential Income Boost: +$@strategy.IncomeBoost/month</span>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="happiness-tips mt-6">
                                <h4 class="retro-heading-sm text-blue-700 mb-3">üéØ Leadership Tips</h4>
                                <div class="tips-grid">
                                    <div class="tip-item">üéì Invest in education and schools</div>
                                    <div class="tip-item">üè• Provide good healthcare</div>
                                    <div class="tip-item">üé® Support arts and culture</div>
                                    <div class="tip-item">üå± Protect the environment</div>
                                    <div class="tip-item">‚öñÔ∏è Ensure fair laws and justice</div>
                                    <div class="tip-item">üíº Create job opportunities</div>
                                </div>
                            </div>
                        </div>
                    }
                    else if (activeTab == "strategy")
                    {
                        <div class="strategy-section">
                            <h3 class="retro-heading-sm mb-4">üîÆ Strategy Oracle for @selectedTerritoryDetails.CountryName</h3>
                            
                            <div class="oracle-crystal mb-6">
                                <div class="crystal-animation">üîÆ</div>
                                <p class="retro-body text-center text-purple-700">
                                    The Oracle reveals the best paths to prosperity...
                                </p>
                            </div>

                            @if (isLoadingOracle)
                            {
                                <div class="oracle-loading">
                                    <div class="retro-loading-spinner"></div>
                                    <p class="retro-body">The Oracle is consulting the crystal ball...</p>
                                </div>
                            }
                            else if (oracleRecommendations.Any())
                            {
                                <div class="oracle-recommendations">
                                    @foreach (var recommendation in oracleRecommendations)
                                    {
                                        <div class="oracle-card">
                                            <div class="oracle-header">
                                                <span class="oracle-type">@recommendation.Type</span>
                                                <span class="oracle-confidence">@recommendation.Confidence% Confidence</span>
                                            </div>
                                            <h4 class="retro-heading-sm text-purple-700 mb-2">@recommendation.Title</h4>
                                            <p class="retro-body mb-3">@recommendation.Description</p>
                                            <div class="oracle-outcomes">
                                                <h5 class="font-bold text-sm mb-2">Predicted Outcomes:</h5>
                                                @foreach (var outcome in recommendation.PredictedOutcomes)
                                                {
                                                    <div class="outcome-item">
                                                        <span class="outcome-icon">@outcome.Icon</span>
                                                        <span class="outcome-text">@outcome.Description</span>
                                                        <span class="outcome-value">@outcome.Value</span>
                                                    </div>
                                                }
                                            </div>
                                            <button @onclick="() => SelectOracleStrategy(recommendation)" 
                                                    class="retro-button w-full mt-3">
                                                ‚ú® Choose This Strategy
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="oracle-prompt">
                                    <button @onclick="() => ConsultOracle(selectedTerritoryDetails.Id)" 
                                            class="retro-button-oracle">
                                        üîÆ Consult the Oracle
                                    </button>
                                    <p class="retro-body text-center mt-3 text-purple-700">
                                        Ask the Oracle for strategic guidance on making the people of @selectedTerritoryDetails.CountryName happy and prosperous!
                                    </p>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Educational constants for child-friendly display
    private const int ITEMS_PER_PAGE_MOBILE = 2;
    private const int ITEMS_PER_PAGE_DESKTOP = 8;
    
    [Parameter] public Guid PlayerId { get; set; }
    [Parameter] public EventCallback<TerritoryDto> OnTerritorySelected { get; set; }
    [Parameter] public int PlayerIncome { get; set; }
    [Parameter] public int PlayerReputation { get; set; }

    private List<TerritoryDto> availableTerritories = new();
    private List<TerritoryDto> ownedTerritories = new();
    private List<TerritoryDto> filteredTerritories = new();
    private TerritoryTier? selectedTier = null;
    private bool isLoading = true;
    private int totalMonthlyIncome = 0;

    // Pagination
    private int currentPage = 1;
    private int itemsPerPage = ITEMS_PER_PAGE_MOBILE;
    private int totalPages => (int)Math.Ceiling((double)filteredTerritories.Count / itemsPerPage);

    // Country Details Modal
    private bool showCountryDetails = false;
    private TerritoryDetailDto? selectedTerritoryDetails = null;
    private string activeTab = "overview";

    // Strategy Oracle
    private bool isLoadingOracle = false;
    private List<OracleRecommendation> oracleRecommendations = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTerritories();
        await UpdateItemsPerPage();
    }

    private async Task LoadTerritories()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var availableTask = TerritoryService.GetAvailableTerritoriesAsync(PlayerId);
            var ownedTask = TerritoryService.GetPlayerTerritoriesAsync(PlayerId);
            var incomeTask = TerritoryService.CalculateMonthlyTerritoryIncomeAsync(PlayerId);

            await Task.WhenAll(availableTask, ownedTask, incomeTask);
            
            availableTerritories = await availableTask;
            ownedTerritories = await ownedTask;
            totalMonthlyIncome = await incomeTask;

            FilterByTier(selectedTier);

            Logger.LogInformation("Loaded {AvailableCount} available and {OwnedCount} owned territories for player {PlayerId}",
                availableTerritories.Count, ownedTerritories.Count, PlayerId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading territories for player {PlayerId}", PlayerId);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void FilterByTier(TerritoryTier? tier)
    {
        selectedTier = tier;
        filteredTerritories = tier == null 
            ? availableTerritories.OrderBy(t => t.Tier).ThenBy(t => t.Cost).ToList()
            : availableTerritories.Where(t => t.Tier == tier).OrderBy(t => t.Cost).ToList();
        
        currentPage = 1; // Reset to first page when filtering
    }

    private List<TerritoryDto> GetPaginatedTerritories()
    {
        var startIndex = (currentPage - 1) * itemsPerPage;
        return filteredTerritories.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private async Task UpdateItemsPerPage()
    {
        // This could be enhanced to detect screen size, for now using mobile-first approach
        itemsPerPage = ITEMS_PER_PAGE_MOBILE;
        await Task.CompletedTask;
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private string GetCurrentPageItemsDescription()
    {
        var startItem = (currentPage - 1) * itemsPerPage + 1;
        var endItem = Math.Min(currentPage * itemsPerPage, filteredTerritories.Count);
        return $"Showing {startItem}-{endItem} of {filteredTerritories.Count} territories";
    }

    private async Task OpenCountryDetails(Guid territoryId)
    {
        try
        {
            isLoading = true;
            selectedTerritoryDetails = await TerritoryService.GetTerritoryDetailsAsync(territoryId);
            showCountryDetails = true;
            activeTab = "overview";
            oracleRecommendations.Clear(); // Reset oracle recommendations
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading territory details for {TerritoryId}", territoryId);
            isLoading = false;
        }
    }

    private void CloseCountryDetails()
    {
        showCountryDetails = false;
        selectedTerritoryDetails = null;
        activeTab = "overview";
        oracleRecommendations.Clear();
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private async Task PurchaseTerritory(Guid territoryId)
    {
        try
        {
            await OnTerritorySelected.InvokeAsync(filteredTerritories.First(t => t.Id == territoryId));
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error selecting territory {TerritoryId}", territoryId);
        }
    }

    private bool CanAffordTerritory(TerritoryDto territory)
    {
        return PlayerIncome >= territory.Cost && PlayerReputation >= territory.ReputationRequired;
    }

    private string GetTierDescription(TerritoryTier tier) => tier switch
    {
        TerritoryTier.Small => "Perfect for beginners! üå±",
        TerritoryTier.Medium => "Good challenge with great rewards! üí™",
        TerritoryTier.Major => "For experienced world leaders! üëë",
        _ => "All amazing countries! üåç"
    };

    private string GetTierEmoji(TerritoryTier tier) => tier switch
    {
        TerritoryTier.Small => "üèòÔ∏è",
        TerritoryTier.Medium => "üèôÔ∏è", 
        TerritoryTier.Major => "üèõÔ∏è",
        _ => "üåç"
    };

    private string GetLanguageName(string languageCode) => languageCode switch
    {
        "en" => "English",
        "es" => "Spanish",
        "fr" => "French",
        "de" => "German",
        "it" => "Italian",
        "pt" => "Portuguese",
        "ru" => "Russian",
        "zh" => "Chinese",
        "ja" => "Japanese",
        "ko" => "Korean",
        "ar" => "Arabic",
        "hi" => "Hindi",
        "ne" => "Nepali",
        "dz" => "Dzongkha",
        "si" => "Sinhala",
        "ta" => "Tamil",
        "my" => "Burmese",
        "ms" => "Malay",
        "th" => "Thai",
        "vi" => "Vietnamese",
        "id" => "Indonesian",
        "tl" => "Filipino",
        "mn" => "Mongolian",
        "lo" => "Lao",
        "dv" => "Dhivehi",
        "tn" => "Tswana",
        _ => languageCode.ToUpper()
    };

    private List<CommonPhrase> GetCommonPhrases(string languageCode) => languageCode switch
    {
        "en" => new() {
            new("Hello", "Hello", "HEH-loh"),
            new("Thank you", "Thank you", "THANK-yoo"),
            new("Welcome", "Welcome", "WEL-kum"),
            new("I love you", "I love you", "AY-luv-yoo")
        },
        "es" => new() {
            new("Hello", "Hola", "OH-lah"),
            new("Thank you", "Gracias", "GRAH-see-ahs"),
            new("Welcome", "Bienvenido", "bee-en-veh-NEE-doh"),
            new("I love you", "Te amo", "teh AH-moh")
        },
        "fr" => new() {
            new("Hello", "Bonjour", "bon-ZHOOR"),
            new("Thank you", "Merci", "mer-SEE"),
            new("Welcome", "Bienvenue", "bee-ahn-vuh-NEW"),
            new("I love you", "Je t'aime", "zhuh TEHM")
        },
        "ne" => new() {
            new("Hello", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á", "nah-mas-TAY"),
            new("Thank you", "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶", "dhan-ya-VAAD"),
            new("Welcome", "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§", "swa-GAT"),
            new("I love you", "‡§Æ ‡§§‡§ø‡§Æ‡•Ä‡§≤‡§æ‡§à ‡§Æ‡§æ‡§Ø‡§æ ‡§ó‡§∞‡•ç‡§õ‡•Å", "ma ti-mee-lai MAH-ya gar-chhu")
        },
        "hi" => new() {
            new("Hello", "‡§®‡§Æ‡§∏‡•ç‡§§‡•á", "nah-mas-TAY"),
            new("Thank you", "‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶", "dhan-ya-VAAD"),
            new("Welcome", "‡§∏‡•ç‡§µ‡§æ‡§ó‡§§", "swa-GAT"),
            new("I love you", "‡§Æ‡•à‡§Ç ‡§§‡•Å‡§Æ‡§∏‡•á ‡§™‡•ç‡§Ø‡§æ‡§∞ ‡§ï‡§∞‡§§‡§æ ‡§π‡•Ç‡§Å", "main tum-se PYAAR kar-ta hun")
        },
        _ => new() {
            new("Hello", "Hello", "HEH-loh"),
            new("Thank you", "Thank you", "THANK-yoo"),
            new("Welcome", "Welcome", "WEL-kum"),
            new("I love you", "I love you", "AY-luv-yoo")
        }
    };

    private async Task PlayPronunciation(string phrase, string languageCode)
    {
        // This would integrate with Azure Speech Services for actual pronunciation
        Logger.LogInformation("Playing pronunciation for '{Phrase}' in language '{LanguageCode}'", phrase, languageCode);
        await Task.CompletedTask;
    }

    private List<HappinessStrategy> GetHappinessStrategies(TerritoryDetailDto territory) => new()
    {
        new("üéì", "Education Investment", 
            $"Build world-class schools and universities in {territory.CountryName}. Education is the foundation of a happy society!",
            new[] { "Higher income for citizens", "Better job opportunities", "Increased innovation" },
            Random.Shared.Next(500, 1500)),
        new("üè•", "Healthcare Excellence", 
            $"Provide excellent healthcare for all citizens of {territory.CountryName}. Healthy people are happy people!",
            new[] { "Longer life expectancy", "Reduced medical costs", "Higher productivity" },
            Random.Shared.Next(400, 1200)),
        new("üå±", "Environmental Protection", 
            $"Protect {territory.CountryName}'s natural beauty and create green spaces. A clean environment makes everyone happier!",
            new[] { "Tourism boost", "Cleaner air and water", "Sustainable future" },
            Random.Shared.Next(300, 1000)),
        new("üé®", "Cultural Development", 
            $"Support arts, music, and cultural activities in {territory.CountryName}. Culture brings communities together!",
            new[] { "Cultural pride", "Tourism attraction", "Creative economy" },
            Random.Shared.Next(200, 800)),
        new("üíº", "Economic Growth", 
            $"Create jobs and business opportunities in {territory.CountryName}. Economic prosperity leads to happiness!",
            new[] { "More jobs available", "Higher standard of living", "Economic stability" },
            Random.Shared.Next(600, 2000))
    };

    private async Task ConsultOracle(Guid territoryId)
    {
        try
        {
            isLoadingOracle = true;
            StateHasChanged();

            // Simulate AI Oracle consultation (would integrate with AI service)
            await Task.Delay(2000); // Dramatic pause for the "oracle consultation"

            oracleRecommendations = GenerateOracleRecommendations(selectedTerritoryDetails!);
            
            isLoadingOracle = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error consulting oracle for territory {TerritoryId}", territoryId);
            isLoadingOracle = false;
        }
    }

    private List<OracleRecommendation> GenerateOracleRecommendations(TerritoryDetailDto territory)
    {
        return new()
        {
            new OracleRecommendation
            {
                Type = "üéØ Focus Strategy",
                Title = "Education-First Approach",
                Description = $"The Oracle sees great potential in focusing on education in {territory.CountryName}. This path leads to long-term prosperity and happiness.",
                Confidence = Random.Shared.Next(85, 95),
                PredictedOutcomes = new()
                {
                    new("üìà", "Income increase", "+$800/month"),
                    new("üòä", "Happiness boost", "+15%"),
                    new("‚≠ê", "Reputation gain", "+10%")
                }
            },
            new OracleRecommendation
            {
                Type = "‚ö° Quick Win",
                Title = "Cultural Celebration",
                Description = $"Organize cultural festivals and celebrations in {territory.CountryName}. This will quickly boost happiness and attract tourists!",
                Confidence = Random.Shared.Next(75, 85),
                PredictedOutcomes = new()
                {
                    new("üòä", "Immediate happiness", "+8%"),
                    new("üé™", "Tourism revenue", "+$400/month"),
                    new("üé®", "Cultural pride", "+12%")
                }
            },
            new OracleRecommendation
            {
                Type = "üå± Sustainable Path",
                Title = "Green Development",
                Description = $"The Oracle recommends investing in renewable energy and environmental protection for {territory.CountryName}. This ensures lasting prosperity!",
                Confidence = Random.Shared.Next(80, 90),
                PredictedOutcomes = new()
                {
                    new("üåø", "Environmental health", "+20%"),
                    new("üí∞", "Green economy jobs", "+$600/month"),
                    new("üåç", "Global reputation", "+15%")
                }
            }
        };
    }

    private async Task SelectOracleStrategy(OracleRecommendation recommendation)
    {
        Logger.LogInformation("Player selected oracle strategy: {Strategy} for territory {Territory}", 
            recommendation.Title, selectedTerritoryDetails?.CountryName);
        
        // This would integrate with the game's strategy system
        await Task.CompletedTask;
    }

    // Helper classes
    public record CommonPhrase(string English, string Local, string Pronunciation);

    public record HappinessStrategy(string Icon, string Title, string Description, string[] Benefits, int IncomeBoost);

    public class OracleRecommendation
    {
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public int Confidence { get; set; }
        public List<OracleOutcome> PredictedOutcomes { get; set; } = new();
    }

    public record OracleOutcome(string Icon, string Description, string Value);
}
